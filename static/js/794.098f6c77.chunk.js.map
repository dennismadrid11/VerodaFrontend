{"version":3,"file":"static/js/794.098f6c77.chunk.js","mappings":"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","sources":["webpack://sky/./src/components/channel/Channel.module.css?a1bd","components/channel/ChannelStorage.js","core/string.service.js","components/channel/add-channel/AddChannelComponent.jsx","webpack://sky/./src/components/channel/edit-delete-channel/EditDeleteChannel.module.css?58e1","components/channel/edit-delete-channel/EditDeleteChannelComponent.jsx","components/channel/ChannelComponent.jsx","components/channel/ChannelService.js","webpack://sky/./src/shared/components/custom-time-input/styles.module.css?d7a6","shared/components/custom-time-input/CustomTimeInput.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"box\":\"Channel_box__OIov-\",\"closeIcon\":\"Channel_closeIcon__kM3Xn\",\"headerText\":\"Channel_headerText__K9bRY\",\"userPhoto\":\"Channel_userPhoto__+ZJDh\",\"uploadPhotoButton\":\"Channel_uploadPhotoButton__188ZC\",\"formLabel\":\"Channel_formLabel__7bxVX\",\"formInput\":\"Channel_formInput__MWilR\",\"roleButton\":\"Channel_roleButton__IuPKT\",\"saveIcon\":\"Channel_saveIcon__gnFwJ\",\"trashcanIcon\":\"Channel_trashcanIcon__WS0RL\",\"closeCircleIcon\":\"Channel_closeCircleIcon__dmEPn\",\"hasError\":\"Channel_hasError__GcQvx\",\"required\":\"Channel_required__7221z\",\"loadingHeight\":\"Channel_loadingHeight__HhSHT\",\"formCheck\":\"Channel_formCheck__3xU06\",\"formWrapper\":\"Channel_formWrapper__wWNm1\"};","const ChannelStorage = {\r\n  tableHeaders: [\r\n    {\r\n      headerId: 1,\r\n      headerName: 'Organisation',\r\n      filter: {\r\n        type: 1,\r\n        queryNames: ['organisationFilter', 'organisationFilterValue'],\r\n      },\r\n      sortable: true,\r\n    },\r\n    {\r\n      headerId: 2,\r\n      headerName: 'Channel',\r\n      filter: {\r\n        type: 1,\r\n        queryNames: ['channelFilter', 'channelFilterValue'],\r\n      },\r\n      sortable: true,\r\n    },\r\n    {\r\n      headerId: 6,\r\n      headerName: 'Status',\r\n      filter: {\r\n        type: 4,\r\n        queryNames: ['statusFilter'],\r\n        list: [\r\n          { id: 1, name: 'Active' },\r\n          { id: 2, name: 'Inactive' },\r\n        ],\r\n      },\r\n      sortable: true,\r\n    },\r\n    {\r\n      headerId: 7,\r\n      headerName: 'Time Zone',\r\n      filter: {\r\n        type: 1,\r\n        queryNames: ['timeZoneFilter', 'timeZoneFilterValue'],\r\n      },\r\n      sortable: true,\r\n    },\r\n    {\r\n      headerId: 3,\r\n      headerName: 'Group',\r\n      filter: {\r\n        type: 1,\r\n        queryNames: ['groupFilter', 'groupFilterValue'],\r\n      },\r\n      sortable: true,\r\n    },\r\n    {\r\n      headerId: 4,\r\n      headerName: 'Runs',\r\n      filter: {\r\n        type: 5,\r\n        queryNames: ['runsFilter', 'runsFilterValue'],\r\n      },\r\n      sortable: true,\r\n    },\r\n    {\r\n      headerId: 5,\r\n      headerName: 'Top Rated',\r\n      filter: {\r\n        type: 5,\r\n        queryNames: ['topRatedFilter', 'topRatedFilterValue'],\r\n      },\r\n      sortable: true,\r\n    },\r\n  ],\r\n\r\n  formFields: [\r\n    {\r\n      name: 'Organisation',\r\n      parameterName: 'organisationID',\r\n      type: 'text',\r\n      placeHolder: 'Enter the organisation name',\r\n      isRequired: true,\r\n      maxLength: 99,\r\n    },\r\n    {\r\n      name: 'Channel Group',\r\n      parameterName: 'channelGroup',\r\n      type: 'text',\r\n      placeHolder: 'Enter the Channel Group Name',\r\n      isRequired: true,\r\n      maxLength: 99,\r\n    },\r\n    {\r\n      name: 'Time Zone',\r\n      parameterName: 'timeZone',\r\n      type: 'text',\r\n      placeHolder: 'Enter the TimeZone',\r\n      isRequired: true,\r\n      maxLength: 99,\r\n    },\r\n    {\r\n      name: 'Status',\r\n      parameterName: 'status',\r\n      type: 'text',\r\n      placeHolder: 'Enter the Status',\r\n      isRequired: true,\r\n      maxLength: 99,\r\n    },\r\n    {\r\n      name: 'Channel Name',\r\n      parameterName: 'channelName',\r\n      type: 'text',\r\n      placeHolder: 'Enter the channel name',\r\n      isRequired: true,\r\n      maxLength: 99,\r\n    },\r\n    {\r\n      name: 'Channel Code',\r\n      parameterName: 'code',\r\n      type: 'text',\r\n      placeHolder: 'Enter the channel code',\r\n      isRequired: true,\r\n      maxLength: 100,\r\n    },\r\n    {\r\n      name: 'Start of Day',\r\n      parameterName: 'dayHourStart',\r\n      type: 'text',\r\n      placeHolder: 'Enter the day hour start from 1 - 24',\r\n      isRequired: true,\r\n      maxLength: 24,\r\n    },\r\n    {\r\n      name: 'System Name',\r\n      parameterName: 'systemName',\r\n      type: 'text',\r\n      placeHolder: 'Enter the system name for this channel',\r\n      isRequired: false,\r\n      maxLength: 100,\r\n    },\r\n    {\r\n      name: 'Frame Rate',\r\n      parameterName: 'frameRate',\r\n      type: 'text',\r\n      placeHolder: 'Enter the frame rate for this channel',\r\n      isRequired: false,\r\n      maxLength: 99,\r\n    },\r\n    {\r\n      name: 'Profile Time Interval',\r\n      parameterName: 'timeInterval',\r\n      type: 'text',\r\n      placeHolder: 'Enter the profile time interval',\r\n      isRequired: true,\r\n      maxLength: 99,\r\n    },\r\n  ],\r\n\r\n  editFormFields: [\r\n    {\r\n      name: 'Organisation',\r\n      parameterName: 'organisationID',\r\n      type: 'text',\r\n      placeHolder: 'Enter the organisation name',\r\n      isRequired: true,\r\n      maxLength: 99,\r\n    },\r\n    {\r\n      name: 'Channel Group',\r\n      parameterName: 'channelGroup',\r\n      type: 'text',\r\n      placeHolder: 'Enter the Channel Group Name',\r\n      isRequired: true,\r\n      maxLength: 99,\r\n    },\r\n    {\r\n      name: 'Time Zone',\r\n      parameterName: 'timeZone',\r\n      type: 'text',\r\n      placeHolder: 'Enter the TimeZone',\r\n      isRequired: true,\r\n      maxLength: 99,\r\n    },\r\n    {\r\n      name: 'Status',\r\n      parameterName: 'status',\r\n      type: 'text',\r\n      placeHolder: 'Enter the Status',\r\n      isRequired: true,\r\n      maxLength: 99,\r\n    },\r\n    {\r\n      name: 'Channel Name',\r\n      parameterName: 'channelName',\r\n      type: 'text',\r\n      placeHolder: 'Enter the channel name',\r\n      isRequired: true,\r\n      maxLength: 99,\r\n    },\r\n    {\r\n      name: 'Channel Code',\r\n      parameterName: 'code',\r\n      type: 'text',\r\n      placeHolder: 'Enter the channel code',\r\n      isRequired: true,\r\n      maxLength: 100,\r\n    },\r\n    {\r\n      name: 'Start of Day',\r\n      parameterName: 'dayHourStart',\r\n      type: 'text',\r\n      placeHolder: 'Enter the day hour start from 1 - 24',\r\n      isRequired: true,\r\n      maxLength: 24,\r\n    },\r\n    {\r\n      name: 'System Name',\r\n      parameterName: 'systemName',\r\n      type: 'text',\r\n      placeHolder: 'Enter the system name for this channel',\r\n      isRequired: false,\r\n      maxLength: 100,\r\n    },\r\n    {\r\n      name: 'Frame Rate',\r\n      parameterName: 'frameRate',\r\n      type: 'text',\r\n      placeHolder: 'Enter the frame rate for this channel',\r\n      isRequired: false,\r\n      maxLength: 99,\r\n    },\r\n    {\r\n      name: 'Profile Time Interval',\r\n      parameterName: 'timeInterval',\r\n      type: 'text',\r\n      placeHolder: 'Enter the profile time interval',\r\n      isRequired: true,\r\n      maxLength: 99,\r\n    },\r\n  ],\r\n\r\n  statusList: [\r\n    {\r\n      id: '1',\r\n      name: 'Active',\r\n    },\r\n    {\r\n      id: '2',\r\n      name: 'Inactive',\r\n    },\r\n  ],\r\n\r\n  checkString(text) {\r\n    return text !== '' && text !== null && text !== undefined;\r\n  },\r\n\r\n  timeIntervals: [\r\n    { id: 1, value: 1 },\r\n    { id: 2, value: 2 },\r\n    { id: 3, value: 3 },\r\n    { id: 4, value: 4 },\r\n    { id: 5, value: 6 },\r\n    { id: 6, value: 8 },\r\n    { id: 7, value: 12 },\r\n    { id: 8, value: 24 },\r\n  ],\r\n};\r\n\r\n// const channelStorage = new ChannelStorage();\r\nexport default ChannelStorage;\r\n","const StringService = {\r\n    getNumbersOnly(string) {\r\n        const stringArray = string.split('');\r\n        const result = stringArray.filter((char) => (\r\n          !isNaN(char) && !isNaN(parseFloat(char)) || char === ':'\r\n        ));\r\n        return result.join('');\r\n    },\r\n};\r\n\r\nexport default StringService;\r\n","import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Styles from '../Channel.module.css';\r\nimport { subMinutes, addMinutes } from 'date-fns';\r\nimport closeIcon from '../../../assets/icons/Close.svg';\r\nimport saveIcon from '../../../assets/icons/Save.svg';\r\nimport closeCircleIcon from '../../../assets/icons/Close-Circle.svg';\r\nimport CustomTimeInput from '../../../shared/components/custom-time-input/CustomTimeInput';\r\nimport ChannelService from '../ChannelService';\r\nimport ChannelStorage from '../ChannelStorage';\r\nimport SelectComponent from '../../../shared/elements/select/select.component';\r\nimport {\r\n  success,\r\n  danger,\r\n} from '../../../shared/elements/notification/NotifyComponent';\r\nimport LoadingComponent from '../../_reusable/loading/LoadingComponent';\r\nimport AuthService from '../../../core/auth.service';\r\nimport StringService from '../../../core/string.service';\r\n\r\nfunction AddChannelComponent({\r\n  callbackClosePanel,\r\n  callbackGetChannels,\r\n  channels,\r\n}) {\r\n  const { formFields } = ChannelStorage;\r\n  const { checkString } = ChannelStorage;\r\n  const { statusList } = ChannelStorage;\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [parameters, setParameters] = useState({\r\n    channelName: '',\r\n    organisationID: 0,\r\n    channelGroupID: 0,\r\n    indicatorStatus: 1,\r\n    timeZoneID: 0,\r\n    timeInterval: 1,\r\n    code: '',\r\n    systemName: '',\r\n    dayHourStart: '',\r\n    frameRate: '',\r\n  });\r\n  const [selectedOrganisation, setSelectedOrganisation] = useState(\r\n    'Select Organisation',\r\n  );\r\n\r\n  // const [showOrganisationSelection, setShowOrganisationSelection] = useState(\r\n  //   false,\r\n  // );\r\n  const [organisations, setOrganisations] = useState([]);\r\n\r\n  const [selectedChannelGroup, setSelectedChannelGroup] = useState(\r\n    'Select Channel Group',\r\n  );\r\n  const [selectedTimeInterval, setSelectedTimeInterval] = useState(ChannelStorage.timeIntervals[0]);\r\n  const [selectedStatus, setSelectedStatus] = useState('Active');\r\n  const [channelGroups, setChannelGroups] = useState([]);\r\n  const [selectedTimeZone, setSelectedTimeZone] = useState('Select TimeZone');\r\n\r\n  const [timezones, setTimezones] = useState([]);\r\n  const [validation, setValidation] = useState({\r\n    channelName: false,\r\n    organisation: false,\r\n    channelGroup: false,\r\n    timeZone: false,\r\n    code: false,\r\n    dayHourStart: false,\r\n  });\r\n  const [channelNameErrorText, setChannelNameErrorText] = useState('');\r\n  const [organisationErrorText, setOrganisationErrorText] = useState('');\r\n  const [channelGroupErrorText, setChannelGroupErrorText] = useState('');\r\n  const [timezoneErrorText, setTimezoneErrorText] = useState('');\r\n  const [codeErrorText, setCodeErrorText] = useState('');\r\n  const [dayHourStartErrorText, setDayHourStartErrorText] = useState('');\r\n\r\n  const validateAndClampValue = (value, max) => {\r\n    value = StringService.getNumbersOnly(value);\r\n    value = value === \"\" ? \"\" : String(Math.min(parseInt(value, 10), max));\r\n    value = value === \"0\" ? \"\" : value;\r\n  \r\n    return value;\r\n  };\r\n\r\n  function addLeadingZero(number) {\r\n    const numberString = number.toString();\r\n  \r\n    if (numberString.length === 1) {\r\n      return '0' + numberString;\r\n    } else {\r\n      return numberString;\r\n    }\r\n  }\r\n\r\n  function ConvertToHHMMSS(inputTime) {\r\n    const [hours, minutes] = inputTime.split(':');\r\n    const formattedTime = `${hours}:${minutes}:00`;\r\n    return formattedTime;\r\n  }\r\n\r\n  const changeTime = (e) => {\r\n    if (e) {\r\n      const value = e;\r\n      const hours = value.getHours();\r\n      const minutes = value.getMinutes();\r\n      const minutesWithLeadingNumber = addLeadingZero(minutes);\r\n      const hoursWithLeadingNumber = addLeadingZero(hours);\r\n      const hoursMinutes = hoursWithLeadingNumber + \":\" + minutesWithLeadingNumber;\r\n      setParameters((prevState) => ({\r\n        ...prevState,\r\n        dayHourStart: ConvertToHHMMSS(hoursMinutes),\r\n      }));\r\n    }\r\n    else{\r\n      setParameters((prevState) => ({\r\n        ...prevState,\r\n        dayHourStart: e,\r\n      }));\r\n    }\r\n  }; \r\n\r\n  const onChangeParameters = (e) => {\r\n    let value = e.target.value;\r\n\r\n    if (e.target.name === \"frameRate\") {\r\n      value = validateAndClampValue(value, 99);\r\n    }\r\n\r\n    if (e.target.name === \"dayHourStart\") {\r\n      value = validateAndClampValue(value, 24);\r\n    }\r\n\r\n    setParameters((prevState) => ({\r\n      ...prevState,\r\n      [e.target.name]: value,\r\n    }));\r\n  };\r\n\r\n  const handleCheck = (value, organisationId) => channels.some(\r\n    (channel) => channel.channelName.toLowerCase() === value.trim().toLowerCase()\r\n        && channel.organisationID === organisationId,\r\n  );\r\n\r\n  const handleCheckCode = (value, organisationId) => channels.some(\r\n    (channel) => channel.code !== null\r\n        && channel.code.toLowerCase() === value.trim().toLowerCase()\r\n        && channel.organisationID === organisationId,\r\n  );\r\n\r\n  const validateChannel = () => {\r\n    let valid = true;\r\n    setValidation({\r\n      channelName: false,\r\n      organisation: false,\r\n      channelGroup: false,\r\n      timeZone: false,\r\n      code: false,\r\n      dayHourStart: false,\r\n    });\r\n\r\n    setChannelNameErrorText('');\r\n    setOrganisationErrorText('');\r\n    setChannelGroupErrorText('');\r\n    setTimezoneErrorText('');\r\n    setCodeErrorText('');\r\n    setDayHourStartErrorText('');\r\n\r\n    if (parameters.organisationID === 0) {\r\n      valid = false;\r\n      setValidation((prevState) => ({\r\n        ...prevState,\r\n        organisation: true,\r\n      }));\r\n      setOrganisationErrorText('Organisation is required');\r\n    }\r\n\r\n    if (parameters.channelGroupID === 0) {\r\n      valid = false;\r\n      setValidation((prevState) => ({\r\n        ...prevState,\r\n        channelGroup: true,\r\n      }));\r\n      setChannelGroupErrorText('Channel group is required');\r\n    }\r\n\r\n    if (!checkString(parameters.channelName)) {\r\n      valid = false;\r\n      setValidation((prevState) => ({\r\n        ...prevState,\r\n        channelName: true,\r\n      }));\r\n      setChannelNameErrorText('Channel name is required');\r\n    } else if (parameters.organisationID !== 0) {\r\n      if (handleCheck(parameters.channelName, parameters.organisationID)) {\r\n        valid = false;\r\n        setValidation((prevState) => ({\r\n          ...prevState,\r\n          channelName: true,\r\n        }));\r\n        setChannelNameErrorText('Channel name is used');\r\n      }\r\n    }\r\n\r\n    if (parameters.timeZoneID === 0) {\r\n      valid = false;\r\n      setValidation((prevState) => ({\r\n        ...prevState,\r\n        timeZone: true,\r\n      }));\r\n      setTimezoneErrorText('Timezone is required');\r\n    }\r\n\r\n    if (!checkString(parameters.dayHourStart)) {\r\n      valid = false;\r\n      setValidation((prevState) => ({\r\n        ...prevState,\r\n        dayHourStart: true,\r\n      }));\r\n      setDayHourStartErrorText('Start of day is required');\r\n    }\r\n\r\n    if (!checkString(parameters.code)) {\r\n      valid = false;\r\n      setValidation((prevState) => ({\r\n        ...prevState,\r\n        code: true,\r\n      }));\r\n      setCodeErrorText('Channel code is required');\r\n    } else if (parameters.organisationID !== 0) {\r\n      if (handleCheckCode(parameters.code, parameters.organisationID)) {\r\n        valid = false;\r\n        setValidation((prevState) => ({\r\n          ...prevState,\r\n          code: true,\r\n        }));\r\n        setCodeErrorText('Channel code is used');\r\n      }\r\n    }\r\n\r\n    return valid;\r\n  };\r\n\r\n  const convertToInt = (stringNumber) => {\r\n    var value = parseInt(stringNumber);\r\n    return value;\r\n  }\r\n\r\n  const handleSubmit = () => {\r\n    setErrorMessage('');\r\n\r\n    setIsSubmitting(true);\r\n    if (!isSubmitting) {\r\n      if (validateChannel()) {\r\n        convertToInt(parameters.dayHourStart);\r\n        ChannelService.addChannel(parameters)\r\n          .then(() => {\r\n            callbackClosePanel();\r\n            callbackGetChannels();\r\n            success('Channel created successfully');\r\n          })\r\n          .catch((error) => {\r\n            const responseMessage = error.response.data.message;\r\n            danger(responseMessage);\r\n          })\r\n          .finally(() => {\r\n            setIsSubmitting(false);\r\n          });\r\n      } else {\r\n        setIsSubmitting(false);\r\n        danger('Please check required fields');\r\n      }\r\n    }\r\n  };\r\n\r\n  const getChannelGroups = (organisationFilter) => {\r\n    ChannelService.getChannelGroups(organisationFilter).then((response) => {\r\n      const responseChanneGroups = response.data.channelGroups;\r\n      const channelGroupOptions = [];\r\n      responseChanneGroups.map((value) => {\r\n        channelGroupOptions.push({\r\n          id: value.channelGroupId,\r\n          name: value.channelGroupName,\r\n        });\r\n        return true;\r\n      });\r\n\r\n      setChannelGroups(channelGroupOptions);\r\n    });\r\n  };\r\n\r\n  const selectOrganisation = (selected) => {\r\n    // setShowOrganisationSelection(false);\r\n    setSelectedOrganisation(selected.name);\r\n    setParameters((prevState) => ({\r\n      ...prevState,\r\n      organisationID: selected.id,\r\n    }));\r\n\r\n    setSelectedChannelGroup('Select Channel Group');\r\n    const organisationFilter = `?organisationFilter=1&organisationFilterValue=${selected.id}`;\r\n    getChannelGroups(organisationFilter);\r\n  };\r\n\r\n  const selectStatus = (selected) => {\r\n    setSelectedStatus(selected.name);\r\n    setParameters((prevState) => ({\r\n      ...prevState,\r\n      indicatorStatus: selected.id,\r\n    }));\r\n  };\r\n\r\n  const getOrganisations = () => {\r\n    setIsSubmitting(true);\r\n    ChannelService.getOrganisations().then((response) => {\r\n      const organisationArray = [];\r\n      const responseOrganisations = response.data.organisations;\r\n      const organisationOptions = [];\r\n      responseOrganisations.map((value) => {\r\n        organisationOptions.push({ id: value.id, name: value.name });\r\n        organisationArray.push(value.id);\r\n        return true;\r\n      });\r\n\r\n      setOrganisations(organisationOptions);\r\n      setIsSubmitting(false);\r\n    });\r\n  };\r\n\r\n  const selectChannelGroup = (selected) => {\r\n    // setShowChannelGroupSelection(false);\r\n    setSelectedChannelGroup(selected.name);\r\n    setParameters((prevState) => ({\r\n      ...prevState,\r\n      channelGroupID: selected.id,\r\n    }));\r\n  };\r\n\r\n  const selectTimeInterval = (selected) => {\r\n    setSelectedTimeInterval(selected);\r\n    setParameters({\r\n      ...parameters,\r\n      timeInterval: selected.value,\r\n    });\r\n  };\r\n\r\n  const getTimezones = () => {\r\n    setIsSubmitting(true);\r\n    ChannelService.getTimezoneLookup().then((response) => {\r\n      const responseData = response.data;\r\n      setTimezones(responseData);\r\n      const defaultData = responseData.filter((item) => item.name === '(UTC+00:00) Dublin, Edinburgh, Lisbon, London')[0];\r\n      setSelectedTimeZone(defaultData.name);\r\n      setParameters((prevState) => ({\r\n        ...prevState,\r\n        timeZoneID: defaultData.id,\r\n      }));\r\n      setIsSubmitting(false);\r\n    });\r\n  };\r\n\r\n  const selectTimezone = (selected) => {\r\n    setSelectedTimeZone(selected.name);\r\n    setParameters((prevState) => ({\r\n      ...prevState,\r\n      timeZoneID: selected.id,\r\n    }));\r\n  };\r\n\r\n  useEffect(() => {\r\n    setSelectedOrganisation('Select Organisation');\r\n    setSelectedChannelGroup('Select Channel Group');\r\n    getOrganisations();\r\n    getTimezones();\r\n\r\n    if (AuthService.isOrganisationalAdmin()) {\r\n      const organisation = {\r\n        organisationFilter: AuthService.getUserIdentity().organisationId,\r\n        organisationFilterValue: AuthService.getUserIdentity().organisationName,\r\n      };\r\n      const queryString = `?organisationFilter=${organisation.organisationFilter}&organisationFilterValue=${organisation.organisationFilterValue}`;\r\n\r\n      getChannelGroups(queryString);\r\n      setParameters({\r\n        ...parameters,\r\n        organisationID: organisation.organisationFilter,\r\n      });\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const spanErrorText = (field) => {\r\n    if (field.parameterName === 'channelName') return channelNameErrorText;\r\n    if (field.parameterName === 'organisationID') return organisationErrorText;\r\n    if (field.parameterName === 'channelGroup') return channelGroupErrorText;\r\n    if (field.parameterName === 'timeZone') return timezoneErrorText;\r\n    if (field.parameterName === 'code') return codeErrorText;\r\n    if (field.parameterName === 'dayHourStart') return dayHourStartErrorText;\r\n    return '';\r\n  };\r\n\r\n  const spanHasError = (field) => {\r\n    if (field.parameterName === 'channelName') return validation.channelName;\r\n    if (field.parameterName === 'organisationID') return validation.organisation;\r\n    if (field.parameterName === 'channelGroup') return validation.channelGroup;\r\n    if (field.parameterName === 'timeZone') return validation.timeZone;\r\n    if (field.parameterName === 'code') return validation.code;\r\n    if (field.parameterName === 'dayHourStart') return validation.dayHourStart;\r\n    return false;\r\n  };\r\n\r\n  return (\r\n    <div className={Styles.box}>\r\n      <div className=\"position-relative\">\r\n        <i>\r\n          <img\r\n            className={Styles.closeIcon}\r\n            src={closeIcon}\r\n            alt=\"\"\r\n            onClick={() => callbackClosePanel()}\r\n            onKeyDown={() => callbackClosePanel()}\r\n            role=\"presentation\"\r\n          />\r\n        </i>\r\n      </div>\r\n\r\n      {isSubmitting ? (\r\n        <div\r\n          className=\"d-flex position-relative\"\r\n          style={{ width: '100%', top: '30%' }}\r\n        >\r\n          <LoadingComponent />\r\n        </div>\r\n      ) : (\r\n        <>\r\n          <div className={Styles.formWrapper}>\r\n            <div\r\n              className=\"d-flex position-relative\"\r\n            >\r\n              <p className={Styles.headerText}>New Channel</p>\r\n            </div>\r\n\r\n            {formFields.map((field) => (\r\n              <div key={field.id}>\r\n                <div\r\n                  className={Styles.formLabel}\r\n                  hidden={\r\n                    field.name === 'Organisation'\r\n                    && AuthService.isOrganisationalAdmin()\r\n                  }\r\n                >\r\n                  {field.name}\r\n                  {' '}\r\n                  {field.isRequired ? (\r\n                    <span className={Styles.required}>*</span>\r\n                  ) : (\r\n                    undefined\r\n                  )}\r\n                </div>\r\n\r\n                {(field.parameterName === 'channelName'\r\n                  || field.parameterName === 'code' || field.parameterName === 'systemName' \r\n                  || field.parameterName === 'frameRate') && (\r\n                  <input\r\n                    className={Styles.formInput}\r\n                    name={field.parameterName && field.parameterName}\r\n                    type={field.type}\r\n                    placeholder={field.placeHolder}\r\n                    value={parameters[field.parameterName]}\r\n                    onChange={onChangeParameters}\r\n                    maxLength={field.maxLength}\r\n                    onKeyDown={(evt) => evt.target.maxLength <= evt.target.value.length\r\n                      && evt.key !== 'Backspace'\r\n                      && evt.preventDefault()}\r\n                  />\r\n                )}\r\n\r\n                {(field.parameterName === 'dayHourStart') && (\r\n                     <CustomTimeInput\r\n                     onChange={(e) => changeTime(e)}\r\n                   />\r\n                )}\r\n                 \r\n\r\n                {field.parameterName === 'channelGroup' && (\r\n                  <SelectComponent\r\n                    label=\"\"\r\n                    text={selectedChannelGroup}\r\n                    list={channelGroups}\r\n                    onSelect={selectChannelGroup}\r\n                    width=\"100%\"\r\n                    disabled={false}\r\n                    withSearch\r\n                  />\r\n                )}\r\n\r\n                {field.parameterName === 'timeInterval' && (\r\n                  <SelectComponent\r\n                    label=\"\"\r\n                    text={`${selectedTimeInterval.value} Hour${selectedTimeInterval.value > 1 ? 's' : ''}`}\r\n                    list={ChannelStorage.timeIntervals}\r\n                    height={\"149px\"}\r\n                    onSelect={selectTimeInterval}\r\n                    width=\"100%\"\r\n                  />\r\n                )}\r\n\r\n                {field.parameterName === 'organisationID'\r\n                  && !AuthService.isOrganisationalAdmin() && (\r\n                    <SelectComponent\r\n                      label=\"\"\r\n                      text={selectedOrganisation}\r\n                      list={organisations}\r\n                      onSelect={selectOrganisation}\r\n                      width=\"100%\"\r\n                      disabled={false}\r\n                      withSearch\r\n                    />\r\n                )}\r\n\r\n                {field.parameterName === 'timeZone' && (\r\n                  <SelectComponent\r\n                    label=\"\"\r\n                    text={selectedTimeZone}\r\n                    list={timezones}\r\n                    onSelect={selectTimezone}\r\n                    width=\"100%\"\r\n                    disabled={false}\r\n                    withSearch\r\n                  />\r\n                )}\r\n\r\n                {field.parameterName === 'status' && (\r\n                  <SelectComponent\r\n                    label=\"\"\r\n                    text={selectedStatus}\r\n                    list={statusList}\r\n                    onSelect={selectStatus}\r\n                    width=\"100%\"\r\n                    disabled={false}\r\n                  />\r\n                )}\r\n                {spanHasError(field) && (\r\n                  <span className={Styles.hasError}>{spanErrorText(field)}</span>\r\n                )}\r\n          </div>\r\n            ))}\r\n\r\n        <div\r\n            className=\"position-absolute start-0 bottom-0 text-center\"\r\n            style={{\r\n              width: '100%',\r\n              marginBottom: '21px',\r\n            }}\r\n          >\r\n            <i\r\n              className={Styles.saveIcon}\r\n              style={{ pointerEvent: isSubmitting && 'none' }}\r\n              data-toggle=\"tooltip\"\r\n              data-placement=\"top\"\r\n              title=\"Save new Channel\"\r\n            >\r\n              <img\r\n                src={saveIcon}\r\n                alt=\"\"\r\n                onClick={handleSubmit}\r\n                onKeyDown={handleSubmit}\r\n                role=\"presentation\"\r\n              />\r\n            </i>\r\n            <i\r\n              className={Styles.closeCircleIcon}\r\n              data-toggle=\"tooltip\"\r\n              data-placement=\"top\"\r\n              title=\"Cancel\"\r\n            >\r\n              <img\r\n                src={closeCircleIcon}\r\n                alt=\"\"\r\n                onClick={() => callbackClosePanel()}\r\n                onKeyDown={() => callbackClosePanel()}\r\n                role=\"presentation\"\r\n              />\r\n            </i>\r\n            {errorMessage !== '' && errorMessage}\r\n          </div>\r\n        </div>\r\n\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\nAddChannelComponent.propTypes = {\r\n  callbackClosePanel: PropTypes.func.isRequired,\r\n  callbackGetChannels: PropTypes.func.isRequired,\r\n  channels: PropTypes.arrayOf(PropTypes.shape),\r\n};\r\nAddChannelComponent.defaultProps = {\r\n  channels: null,\r\n};\r\nexport default AddChannelComponent;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"userPhoto\":\"EditDeleteChannel_userPhoto__fc7e-\",\"uploadPhotoButton\":\"EditDeleteChannel_uploadPhotoButton__bu130\",\"userInfo\":\"EditDeleteChannel_userInfo__+f5MT\",\"deleteButton\":\"EditDeleteChannel_deleteButton__P-aSn\",\"cancelButton\":\"EditDeleteChannel_cancelButton__l0SKs\",\"divLoadingPanel\":\"EditDeleteChannel_divLoadingPanel__GkKUy\",\"formCheck\":\"EditDeleteChannel_formCheck__tn3Wb\",\"buttons\":\"EditDeleteChannel_buttons__FtUpa\"};","import React, { useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Modal } from 'react-bootstrap';\r\nimport LoadingComponent from '../../_reusable/loading/LoadingComponent';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\nimport DateService from '../../../core/date.service';\r\nimport Styles from './EditDeleteChannel.module.css';\r\nimport UserStyles from '../Channel.module.css';\r\nimport closeCircleIcon from '../../../assets/icons/Close-Circle.svg';\r\nimport closeIcon from '../../../assets/icons/Close.svg';\r\nimport saveIcon from '../../../assets/icons/Save.svg';\r\nimport ChannelService from '../ChannelService';\r\nimport ChannelStorage from '../ChannelStorage';\r\nimport { subMinutes, addMinutes } from 'date-fns';\r\nimport SelectComponent from '../../../shared/elements/select/select.component';\r\nimport CustomTimeInput from '../../../shared/components/custom-time-input/CustomTimeInput';\r\nimport {\r\n  success,\r\n  danger,\r\n} from '../../../shared/elements/notification/NotifyComponent';\r\nimport AuthService from '../../../core/auth.service';\r\nimport Button from '../../../shared/components/button/Button';\r\nimport StringService from '../../../core/string.service';\r\n\r\nfunction EditDeleteChannelComponent({\r\n  selectedChannel,\r\n  callbackClosePanel,\r\n  callbackGetChannels,\r\n  channels,\r\n}) {\r\n  const formFields = ChannelStorage.editFormFields;\r\n  const { checkString } = ChannelStorage;\r\n  const { statusList } = ChannelStorage;\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [parameters, setParameters] = useState({\r\n    channelName: '',\r\n    systemName: '',\r\n    frameRate: '',\r\n    organisationID: 0,\r\n    channelId: 0,\r\n    channelGroupID: false,\r\n    indicatorStatus: 1,\r\n    timeZoneID: 0,\r\n    code: '',\r\n    dayHourStart: '',\r\n  });\r\n  const [selectedOrganisation, setSelectedOrganisation] = useState(\r\n    'Select Organisation',\r\n  );\r\n  // const [showOrganisationSelection, setShowOrganisationSelection] = useState(\r\n  //   false\r\n  // );\r\n  const organisations = [];\r\n\r\n  const [selectedChannelGroup, setSelectedChannelGroup] = useState(\r\n    'Select Channel Group',\r\n  );\r\n  const [selectedTimeInterval, setSelectedTimeInterval] = useState(ChannelStorage.timeIntervals[0]);\r\n  const [originalTimeInterval, setOriginalTimeInterval] = useState();\r\n  const [selectedStatus, setSelectedStatus] = useState('Select Status');\r\n  // const [showChannelGroupSelection, setShowChannelGroupSelection] = useState(\r\n  //   false\r\n  // );\r\n  const [channelGroups, setChannelGroups] = useState([]);\r\n  const [selectedTimeZone, setSelectedTimeZone] = useState('Select TimeZone');\r\n  const [\r\n    showTimeIntervalConfirmationModal,\r\n    setShowTimeIntervalConfirmationModal,\r\n  ] = useState(false);\r\n\r\n  const [timezones, setTimezones] = useState([]);\r\n  const [validation, setValidation] = useState({\r\n    name: false,\r\n    organisation: false,\r\n    maxRuns: false,\r\n    topX: false,\r\n    timeZone: false,\r\n    code: false,\r\n    dayHourStart: false,\r\n  });\r\n  const [channelNameErrorText, setChannelNameErrorText] = useState('');\r\n  const [organisationErrorText, setOrganisationErrorText] = useState('');\r\n  const [channelGroupErrorText, setChannelGroupErrorText] = useState('');\r\n  const [timezoneErrorText, setTimezoneErrorText] = useState('');\r\n  const [codeErrorText, setCodeErrorText] = useState('');\r\n  const [dayHourStartErrorText, setDayHourStartErrorText] = useState('');\r\n\r\n\r\n  const [channelGroupInfo, setChannelGroupInfo] = useState({});\r\n  const [modalShow, setModalShow] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const validateAndClampValue = (value, max) => {\r\n    value = StringService.getNumbersOnly(value);\r\n    value = value === \"\" ? \"\" : String(Math.min(parseInt(value, 10), max));\r\n    value = value === \"0\" ? \"\" : value;\r\n\r\n    return value;\r\n  };\r\n\r\n  function addLeadingZero(number) {\r\n    const numberString = number.toString();\r\n  \r\n    if (numberString.length === 1) {\r\n      return '0' + numberString;\r\n    } else {\r\n      return numberString;\r\n    }\r\n  }\r\n\r\n  function ConvertToHHMMSS(inputTime) {\r\n    if (inputTime && typeof inputTime === 'string') {\r\n      const [hours, minutes] = inputTime.split(':');\r\n      const formattedTime = `${hours}:${minutes}:00`;\r\n      return formattedTime;\r\n    }\r\n    return inputTime;\r\n  }\r\n  \r\n\r\n  const changeTime = (e) => {\r\n    setParameters((prevState) => ({\r\n      ...prevState,\r\n      dayHourStart: e,\r\n    }));\r\n  };\r\n  \r\n  const convertToStringDayHourStart = (parameters) => {\r\n    if (parameters.dayHourStart) {\r\n      const parametersClone = parameters;\r\n      const hours = parameters.dayHourStart.getHours();\r\n      const minutes = parameters.dayHourStart.getMinutes();\r\n      const minutesWithLeadingNumber = addLeadingZero(minutes);\r\n      const hoursWithLeadingNumber = addLeadingZero(hours);\r\n      const hoursMinutes = hoursWithLeadingNumber + \":\" + minutesWithLeadingNumber;\r\n      parametersClone.dayHourStart = ConvertToHHMMSS(hoursMinutes);\r\n      return parametersClone;\r\n    }\r\n    else{\r\n      return parametersClone;\r\n    }\r\n  };\r\n\r\n  const onChangeParameters = (e) => {\r\n    let value = e.target.value;\r\n    \r\n    if (e.target.name === \"frameRate\") {\r\n      value = validateAndClampValue(value, 99);\r\n    }\r\n    if (e.target.name === \"dayHourStart\") {\r\n      value = validateAndClampValue(value, 24);\r\n    }\r\n    \r\n    setParameters((prevState) => ({\r\n      ...prevState,\r\n      [e.target.name]: value,\r\n    }));\r\n  };\r\n\r\n  const handleCheck = (value, organisationID) => channels.some(\r\n    (channel) => channel.channelName.toLowerCase() === value.trim().toLowerCase()\r\n        && channel.organisationID === organisationID\r\n        && channel.channelId !== selectedChannel.channelId,\r\n  );\r\n\r\n  const handleCheckCode = (value, organisationId) => channels.some(\r\n    (channel) => channel.code !== null\r\n        && channel.code.toLowerCase() === value.trim().toLowerCase()\r\n        && channel.organisationID === organisationId\r\n        && channel.channelId !== selectedChannel.channelId,\r\n  );\r\n\r\n  const validateChannelGroup = () => {\r\n    let valid = true;\r\n    setValidation({\r\n      channelName: false,\r\n      organisation: false,\r\n      channelGroup: false,\r\n      timeZone: false,\r\n      code: false,\r\n      dayHourStart: false,\r\n    });\r\n\r\n    setChannelNameErrorText('');\r\n    setOrganisationErrorText('');\r\n    setChannelGroupErrorText('');\r\n    setTimezoneErrorText('');\r\n    setCodeErrorText('');\r\n\r\n    if (parameters.organisationID === 0) {\r\n      valid = false;\r\n      setValidation((prevState) => ({\r\n        ...prevState,\r\n        organisation: true,\r\n      }));\r\n      setOrganisationErrorText('Organisation is required');\r\n    }\r\n\r\n    if (parameters.channelGroupID === 0) {\r\n      valid = false;\r\n      setValidation((prevState) => ({\r\n        ...prevState,\r\n        channelGroup: true,\r\n      }));\r\n      setChannelGroupErrorText('Channel group is required');\r\n    }\r\n\r\n    if (!checkString(parameters.channelName)) {\r\n      valid = false;\r\n      setValidation((prevState) => ({\r\n        ...prevState,\r\n        channelName: true,\r\n      }));\r\n      setChannelNameErrorText('Channel name is required');\r\n    } else if (handleCheck(parameters.channelName, parameters.organisationID)) {\r\n      valid = false;\r\n      setValidation((prevState) => ({\r\n        ...prevState,\r\n        channelName: true,\r\n      }));\r\n      setChannelNameErrorText('Channel name is used');\r\n    }\r\n\r\n    if (parameters.timeZoneID === 0 || parameters.timeZoneID === null) {\r\n      valid = false;\r\n      setValidation((prevState) => ({\r\n        ...prevState,\r\n        timeZone: true,\r\n      }));\r\n      setTimezoneErrorText('Timezone is required');\r\n    }\r\n\r\n    if (!checkString(parameters.dayHourStart)) {\r\n      valid = false;\r\n      setValidation((prevState) => ({\r\n        ...prevState,\r\n        dayHourStart: true,\r\n      }));\r\n      setDayHourStartErrorText('Start of day is required');\r\n    }\r\n\r\n    if (!checkString(parameters.code)) {\r\n      valid = false;\r\n      setValidation((prevState) => ({\r\n        ...prevState,\r\n        code: true,\r\n      }));\r\n      setCodeErrorText('Channel code is required');\r\n    } else if (parameters.organisationID !== 0) {\r\n      if (handleCheckCode(parameters.code, parameters.organisationID)) {\r\n        valid = false;\r\n        setValidation((prevState) => ({\r\n          ...prevState,\r\n          code: true,\r\n        }));\r\n        setCodeErrorText('Channel code is used');\r\n      }\r\n    }\r\n\r\n    return valid;\r\n  };\r\n\r\n  const handleEditSubmit = (proceed) => {\r\n    if (\r\n      originalTimeInterval === parameters.timeInterval\r\n      || proceed\r\n    ) {\r\n      setErrorMessage('');\r\n      setIsSubmitting(true);\r\n      if (!isSubmitting) {\r\n        if (!validateChannelGroup()) {\r\n          danger('Please check required fields');\r\n          setIsSubmitting(false);\r\n          setShowTimeIntervalConfirmationModal(false);\r\n        } else {\r\n          ChannelService.updateChannel(selectedChannel.channelId, convertToStringDayHourStart(parameters))\r\n            .then(() => {\r\n              callbackClosePanel();\r\n              callbackGetChannels();\r\n              success('Channel updated successfully');\r\n            })\r\n            .catch((error) => {\r\n              const responseMessage = error.response.data.message;\r\n              danger(responseMessage);\r\n              setShowTimeIntervalConfirmationModal(false);\r\n            })\r\n            .finally(() => {\r\n              setIsSubmitting(false);\r\n            });\r\n        }\r\n      }\r\n    } else {\r\n      setShowTimeIntervalConfirmationModal(true);\r\n    }\r\n  };\r\n\r\n  const onHideTimeIntervalConfirmationModal = () => {\r\n    setShowTimeIntervalConfirmationModal(false);\r\n  };\r\n\r\n  const handleDeleteSubmit = () => {\r\n    // setErrorMessage('');\r\n    // setIsSubmitting(true);\r\n    // if (!isSubmitting) {\r\n    //   OrganisationService.deleteOrganisation(selectedOrganisation.id)\r\n    //     .then(() => {\r\n    //       callbackClosePanel();\r\n    //       callbackGetOrganisation();\r\n    //       success('Organisation deleted successfully');\r\n    //     })\r\n    //     .catch((error) => {\r\n    //       setErrorMessage(error.response.data.message);\r\n    //     })\r\n    //     .finally(() => {\r\n    //       setIsSubmitting(false);\r\n    //       setModalShow(false);\r\n    //     });\r\n    // }\r\n  };\r\n\r\n  const getChannelGroups = (organisationFilter) => {\r\n    setIsSubmitting(true);\r\n    ChannelService.getChannelGroups(organisationFilter).then((response) => {\r\n      const responseChanneGroups = response.data.channelGroups;\r\n      const channelGroupOptions = [];\r\n      responseChanneGroups.map((value) => {\r\n        channelGroupOptions.push({\r\n          id: value.channelGroupId,\r\n          name: value.channelGroupName,\r\n        });\r\n        return true;\r\n      });\r\n\r\n      setChannelGroups(channelGroupOptions);\r\n      setIsSubmitting(false);\r\n    });\r\n  };\r\n\r\n  const selectOrganisation = (selected) => {\r\n    // setShowOrganisationSelection(false);\r\n    setSelectedOrganisation(selected.name);\r\n    setParameters((prevState) => ({\r\n      ...prevState,\r\n      organisationID: selected.id,\r\n    }));\r\n    setSelectedChannelGroup('Select Channel Group');\r\n    const organisationFilter = `?organisationFilter=1&organisationFilterValue=${selected.name}`;\r\n    getChannelGroups(organisationFilter);\r\n  };\r\n\r\n  const selectStatus = (selected) => {\r\n    setSelectedStatus(selected.name);\r\n    setParameters((prevState) => ({\r\n      ...prevState,\r\n      indicatorStatus: selected.id,\r\n    }));\r\n  };\r\n\r\n  const selectChannelGroup = (selected) => {\r\n    // setShowChannelGroupSelection(false);\r\n    setSelectedChannelGroup(selected.name);\r\n    setParameters((prevState) => ({\r\n      ...prevState,\r\n      channelGroupID: selected.id,\r\n    }));\r\n  };\r\n\r\n  const selectTimeInterval = (selected) => {\r\n    setSelectedTimeInterval(selected);\r\n    setParameters({\r\n      ...parameters,\r\n      timeInterval: selected.value,\r\n    });\r\n  };\r\n\r\n  function ConvertTimeStringToDate(timeString) {\r\n    if(timeString){\r\n    const [hours, minutes] = timeString.split(':');\r\n    \r\n    const currentDate = new Date();\r\n    currentDate.setHours(parseInt(hours));\r\n    currentDate.setMinutes(parseInt(minutes));\r\n    \r\n    return currentDate;\r\n    }\r\n    else {\r\n      return ''\r\n    }\r\n  }\r\n\r\n  const getChannel = () => {\r\n    ChannelService.getChannel(selectedChannel.channelId).then((response) => {\r\n      setSelectedOrganisation(response.data.organisationName);\r\n      setSelectedChannelGroup(response.data.channelGroupName);\r\n      setSelectedStatus(response.data.status);\r\n      setParameters({\r\n        channelID: response.data.channelId,\r\n        channelName: response.data.channelName,\r\n        systemName : response.data.systemName,\r\n        frameRate : !response.data.frameRate ? \"\" : response.data.frameRate,\r\n        organisationID: response.data.organisationID,\r\n        channelGroupID: response.data.channelGroupID,\r\n        indicatorStatus: response.data.indicatorStatus,\r\n        timeZoneID: response.data.timeZoneID,\r\n        timeInterval: response.data.timeInterval,\r\n        code: response.data.code == null ? '' : response.data.code,\r\n        dayHourStart: response.data.dayHourStart !== null ? ConvertTimeStringToDate(response.data.dayHourStart) : \"\",\r\n      });\r\n      setChannelGroupInfo({\r\n        dateCreated: DateService.toLocalFormat(response.data.dateCreated),\r\n      });\r\n      setSelectedTimeZone(\r\n        response.data.timeZoneName === ''\r\n          ? 'Select TimeZone'\r\n          : response.data.timeZoneName,\r\n      );\r\n      setIsLoading(false);\r\n\r\n      const predefinedTimeInterval = ChannelStorage.timeIntervals.find((o) => (\r\n        o.value === response.data.timeInterval\r\n      ));\r\n      setSelectedTimeInterval(predefinedTimeInterval);\r\n      setOriginalTimeInterval(response.data.timeInterval);\r\n    });\r\n  };\r\n\r\n  const getTimezones = () => {\r\n    setIsLoading(true);\r\n    ChannelService.getTimezoneLookup().then((response) => {\r\n      const responseData = response.data;\r\n      setTimezones(responseData);\r\n      setIsLoading(false);\r\n    });\r\n  };\r\n\r\n  const selectTimezone = (selected) => {\r\n    setSelectedTimeZone(selected.name);\r\n    setParameters((prevState) => ({\r\n      ...prevState,\r\n      timeZoneID: selected.id,\r\n    }));\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (AuthService.isOrganisationalAdmin()) {\r\n      const organisation = {\r\n        organisationFilter: AuthService.getUserIdentity().organisationId,\r\n        organisationFilterValue: AuthService.getUserIdentity().organisationName,\r\n      };\r\n      const queryString = `?organisationFilter=${organisation.organisationFilter}&organisationFilterValue=${organisation.organisationFilterValue}`;\r\n\r\n      getChannelGroups(queryString);\r\n      setParameters({\r\n        ...parameters,\r\n        organisationID: organisation.organisationFilter,\r\n      });\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    getChannel();\r\n    getTimezones();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [selectedChannel.channelId]);\r\n\r\n  const spanErrorText = (field) => {\r\n    if (field.parameterName === 'channelName') return channelNameErrorText;\r\n    if (field.parameterName === 'organisationID') return organisationErrorText;\r\n    if (field.parameterName === 'channelGroup') return channelGroupErrorText;\r\n    if (field.parameterName === 'timeZone') return timezoneErrorText;\r\n    if (field.parameterName === 'code') return codeErrorText;\r\n    if (field.parameterName === 'dayHourStart') return dayHourStartErrorText;\r\n    return '';\r\n  };\r\n\r\n  const spanHasError = (field) => {\r\n    if (field.parameterName === 'channelName') return validation.channelName;\r\n    if (field.parameterName === 'organisationID') return validation.organisationID;\r\n    if (field.parameterName === 'channelGroup') return validation.channelGroup;\r\n    if (field.parameterName === 'timeZone') return validation.timeZone;\r\n    if (field.parameterName === 'code') return validation.code;\r\n    if (field.parameterName === 'dayHourStart') return validation.dayHourStart;\r\n    return false;\r\n  };\r\n\r\n  return (\r\n    <div className={UserStyles.box}>\r\n      <div className=\"position-relative\">\r\n        <i>\r\n          <img\r\n            className={UserStyles.closeIcon}\r\n            src={closeIcon}\r\n            alt=\"\"\r\n            onClick={() => callbackClosePanel()}\r\n            onKeyDown={() => callbackClosePanel()}\r\n            role=\"presentation\"\r\n          />\r\n        </i>\r\n      </div>\r\n\r\n      {isLoading ? (\r\n        <div\r\n          className={`${Styles.divLoadingPanel}`}\r\n          style={{ fontSize: '28px' }}\r\n        >\r\n          <div style={{ display: 'table-cell', verticalAlign: 'middle' }}>\r\n            <div>\r\n              <LoadingComponent />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <>\r\n          <div className={UserStyles.formWrapper}>\r\n            <div className=\"d-flex position-relative\">\r\n              <p className={UserStyles.headerText}>Edit Channel</p>\r\n            </div>\r\n            {formFields.map((field) => (\r\n              <div key={field.id}>\r\n                <div\r\n                  className={UserStyles.formLabel}\r\n                  hidden={\r\n                    field.name === 'Organisation'\r\n                    && AuthService.isOrganisationalAdmin()\r\n                  }\r\n                >\r\n                  {field.name}\r\n                  {' '}\r\n                  {field.isRequired ? (\r\n                    <span className={UserStyles.required}>*</span>\r\n                  ) : (\r\n                    undefined\r\n                  )}\r\n                </div>\r\n\r\n                <div>\r\n                  {(field.parameterName === 'channelName'\r\n                    || field.parameterName === 'code' || field.parameterName === 'systemName' \r\n                    || field.parameterName === 'frameRate') && (\r\n                    <input\r\n                      className={UserStyles.formInput}\r\n                      name={field.parameterName && field.parameterName}\r\n                      type={field.type}\r\n                      placeholder={field.placeHolder}\r\n                      value={parameters[field.parameterName]}\r\n                      onChange={onChangeParameters}\r\n                      maxLength={field.maxLength}\r\n                      onKeyDown={(evt) => evt.target.maxLength <= evt.target.value.length\r\n                        && evt.key !== 'Backspace'\r\n                        && evt.preventDefault()}  \r\n                    />\r\n                  )}\r\n      \r\n                  {(field.parameterName === 'dayHourStart') && (\r\n                      <CustomTimeInput\r\n                      value={parameters.dayHourStart}\r\n                      onChange={(e) => changeTime(e)}\r\n                      channelForms={true}\r\n                    />\r\n                  )}\r\n\r\n                  {field.parameterName === 'channelGroup' && (\r\n                    <SelectComponent\r\n                      label=\"\"\r\n                      text={selectedChannelGroup}\r\n                      list={channelGroups}\r\n                      onSelect={selectChannelGroup}\r\n                      width=\"100%\"\r\n                      disabled={!AuthService.isOrganisationalAdmin()}\r\n                      withSearch\r\n                    />\r\n                  )}\r\n\r\n                  {field.parameterName === 'timeInterval' && (\r\n                    <SelectComponent\r\n                      label=\"\"\r\n                      text={`${selectedTimeInterval.value} Hour${selectedTimeInterval.value > 1 ? 's' : ''}`}\r\n                      list={ChannelStorage.timeIntervals}\r\n                      onSelect={selectTimeInterval}\r\n                      height={\"149px\"}\r\n                      width=\"100%\"\r\n                    />\r\n                  )}\r\n\r\n                  {field.parameterName === 'organisationID'\r\n                    && !AuthService.isOrganisationalAdmin() && (\r\n                      <SelectComponent\r\n                        label=\"\"\r\n                        text={selectedOrganisation}\r\n                        list={organisations}\r\n                        onSelect={selectOrganisation}\r\n                        width=\"100%\"\r\n                        disabled\r\n                        withSearch\r\n                      />\r\n                  )}\r\n                  {field.parameterName === 'timeZone' && (\r\n                    <SelectComponent\r\n                      label=\"\"\r\n                      text={selectedTimeZone}\r\n                      list={timezones}\r\n                      onSelect={selectTimezone}\r\n                      width=\"100%\"\r\n                      disabled={false}\r\n                      withSearch\r\n                    />\r\n                  )}\r\n                  {field.parameterName === 'status' && (\r\n                    <SelectComponent\r\n                      label=\"\"\r\n                      text={selectedStatus}\r\n                      list={statusList}\r\n                      onSelect={selectStatus}\r\n                      width=\"100%\"\r\n                      disabled={false}\r\n                    />\r\n                  )}\r\n\r\n                  {spanHasError(field) && (\r\n                    <span className={UserStyles.hasError}>\r\n                      {spanErrorText(field)}\r\n                    </span>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            ))}\r\n\r\n            <div className={`${Styles.userInfo} d-flex`}>\r\n              <div>\r\n                <p>\r\n                  Date Created\r\n                  {' '}\r\n                  <br />\r\n                  {' '}\r\n                  <span>{channelGroupInfo.dateCreated}</span>\r\n                </p>\r\n              </div>\r\n            </div>\r\n\r\n            <div\r\n            className=\"position-absolute start-0 bottom-0 text-center\"\r\n            style={{\r\n              width: '100%',\r\n              marginBottom: '10px',\r\n            }}\r\n          >\r\n            <i\r\n              className={UserStyles.saveIcon}\r\n              style={{ pointerEvent: isLoading && 'none' }}\r\n              data-toggle=\"tooltip\"\r\n              data-placement=\"top\"\r\n              title=\"Update channel\"\r\n            >\r\n              <img\r\n                src={saveIcon}\r\n                alt=\"\"\r\n                onClick={() => handleEditSubmit(false)}\r\n                onKeyDown={() => handleEditSubmit(false)}\r\n                role=\"presentation\"\r\n              />\r\n            </i>\r\n            <i className={UserStyles.closeCircleIcon}>\r\n              <img\r\n                src={closeCircleIcon}\r\n                alt=\"\"\r\n                onClick={() => callbackClosePanel()}\r\n                onKeyDown={() => callbackClosePanel()}\r\n                role=\"presentation\"\r\n                data-toggle=\"tooltip\"\r\n                data-placement=\"top\"\r\n                title=\"Cancel\"\r\n              />\r\n            </i>\r\n            {errorMessage !== '' && errorMessage}\r\n          </div>\r\n          </div>\r\n\r\n          \r\n        </>\r\n      )}\r\n\r\n      <Modal\r\n        size=\"md\"\r\n        show={modalShow}\r\n        onHide={() => setModalShow(false)}\r\n        aria-labelledby=\"example-modal-sizes-title-lg\"\r\n      >\r\n        {/* <Modal.Header closeButton>\r\n          <Modal.Title id=\"example-modal-sizes-title-lg\">\r\n            Delete Organisation\r\n          </Modal.Title>\r\n        </Modal.Header> */}\r\n        <Modal.Body style={{ padding: '35px' }}>\r\n          <div style={{ textAlign: 'center' }}>\r\n            You are permanently deleting this channel group\r\n          </div>\r\n          <div style={{ textAlign: 'center', fontSize: '20px' }}>\r\n            Are you sure you want to proceed?\r\n          </div>\r\n\r\n          <div\r\n            style={{\r\n              textAlign: 'center',\r\n              paddingTop: '30px',\r\n            }}\r\n          >\r\n            <button\r\n              className={Styles.cancelButton}\r\n              onClick={() => setModalShow(false)}\r\n              type=\"button\"\r\n            >\r\n              Cancel\r\n            </button>\r\n            <button\r\n              className={Styles.deleteButton}\r\n              onClick={handleDeleteSubmit}\r\n              type=\"button\"\r\n            >\r\n              Proceed\r\n            </button>\r\n          </div>\r\n        </Modal.Body>\r\n      </Modal>\r\n\r\n      <Modal\r\n        show={showTimeIntervalConfirmationModal}\r\n        onHide={onHideTimeIntervalConfirmationModal}\r\n        size=\"lg\"\r\n        centered\r\n      >\r\n        <div style={{ padding: '30px 50px', textAlign: 'center' }}>\r\n          <p style={{ fontSize: '17px' }}>\r\n            Some profiles may already have existing values defined under the\r\n            {' '}\r\n            existing time interval. Changing this channel&apos;s profile time interval\r\n            {' '}\r\n            will result in losing saved values from the previously saved profiles\r\n            {' '}\r\n            under the existing time interval.\r\n          </p>\r\n\r\n          <p style={{ fontSize: '20px', fontWeight: '600' }}>Are you sure you want to proceed?</p>\r\n\r\n          <div>\r\n            <Button defaultBtn text=\"Cancel\" onClick={onHideTimeIntervalConfirmationModal} />\r\n            <Button text=\"Proceed\" onClick={() => handleEditSubmit(true)} />\r\n          </div>\r\n        </div>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\nEditDeleteChannelComponent.propTypes = {\r\n  selectedChannel: PropTypes.shape.isRequired,\r\n  callbackClosePanel: PropTypes.func.isRequired,\r\n  callbackGetChannels: PropTypes.func.isRequired,\r\n  channels: PropTypes.arrayOf(PropTypes.shape),\r\n};\r\nEditDeleteChannelComponent.defaultProps = {\r\n  channels: null,\r\n};\r\nexport default EditDeleteChannelComponent;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { saveAs } from 'file-saver';\r\nimport AuthService from '../../core/auth.service';\r\nimport DateService from '../../core/date.service';\r\nimport Table from '../../shared/components/table/Table';\r\nimport BannerComponent from '../_reusable/banner/BannerComponent';\r\nimport AddChannelComponent from './add-channel/AddChannelComponent';\r\nimport ChannelService from './ChannelService';\r\nimport ChannelStorage from './ChannelStorage';\r\nimport EditDeleteChannelComponent from './edit-delete-channel/EditDeleteChannelComponent';\r\n\r\nfunction ChannelComponent() {\r\n  const isOrganisationAdmin = AuthService.isOrganisationalAdmin();\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isExporting, setIsExporting] = useState(false);\r\n  const [selectedChannel, setSelectedChannel] = useState();\r\n  const [tableHeaders, setTableHeaders] = useState([]);\r\n  const [data, setData] = useState([]);\r\n  const [queryParameters, setQueryParameters] = useState({});\r\n  const [tableParameters, setTableParameters] = useState({});\r\n  const [paginationParameters, setPaginationParameters] = useState({});\r\n  const [sortParameters, setSortParameters] = useState({ order: 1, sort: 2 });\r\n  const [showAddPanel, setShowAddPanel] = useState(false);\r\n  const [channels, setChannels] = useState([]);\r\n\r\n  const constructQueryParameters = (parameters) => {\r\n    const pagination = `?pageNumber=${\r\n      parameters.pageNumber ? parameters.pageNumber : 1\r\n    }\r\n    &pageSize=${parameters.pageSize ? parameters.pageSize : 50}`;\r\n\r\n    const organisation = parameters.organisationFilter && parameters.organisationFilterValue\r\n      ? `&organisationFilter=${parameters.organisationFilter}&organisationFilterValue=${parameters.organisationFilterValue}`\r\n      : '';\r\n\r\n    const group = parameters.groupFilter && parameters.groupFilterValue\r\n      ? `&groupFilter=${parameters.groupFilter}&groupFilterValue=${parameters.groupFilterValue}`\r\n      : '';\r\n\r\n    const runs = parameters.runsFilter && parameters.runsFilterValue\r\n      ? `&runsFilter=${parameters.runsFilter}&runsFilterValue=${parameters.runsFilterValue}`\r\n      : '';\r\n\r\n    const topRated = parameters.topRatedFilter && parameters.topRatedFilterValue\r\n      ? `&topRatedFilter=${parameters.topRatedFilter}&topRatedFilterValue=${parameters.topRatedFilterValue}`\r\n      : '';\r\n\r\n    const channel = parameters.channelFilter && parameters.channelFilterValue\r\n      ? `&channelFilter=${parameters.channelFilter}&channelFilterValue=${parameters.channelFilterValue}`\r\n      : '';\r\n\r\n    let timeZone = parameters.timeZoneFilter && parameters.timeZoneFilterValue\r\n      ? `&timeZoneFilter=${parameters.timeZoneFilter}&timeZoneFilterValue=${parameters.timeZoneFilterValue}`\r\n      : '';\r\n    if (timeZone != null && timeZone.includes('+')) {\r\n      timeZone = timeZone.replace('+', '%2B');\r\n    }\r\n\r\n    const status = parameters.statusFilter\r\n      ? `&statusFilter=${parameters.statusFilter\r\n        .map((item) => item.name)\r\n        .join('-')}`\r\n      : '';\r\n\r\n    const sort = parameters.sortOrder && parameters.sortBy\r\n      ? `&sort=${parameters.sortBy}&sortBy=${parameters.sortOrder}`\r\n      : '';\r\n\r\n    let searchKey = parameters.searchKey\r\n      ? `&SearchKey=${parameters.searchKey}`\r\n      : '';\r\n    if (parameters.searchKey != null && parameters.searchKey.includes('+')) {\r\n      searchKey = searchKey.replace('+', '%2B');\r\n    }\r\n    const useCache = parameters.useCache\r\n      ? `&useCache=${parameters.useCache}`\r\n      : '';\r\n\r\n    let queryString = pagination\r\n      + organisation\r\n      + group\r\n      + runs\r\n      + topRated\r\n      + channel\r\n      + timeZone\r\n      + status\r\n      + sort\r\n      + searchKey\r\n      + useCache;\r\n\r\n    if (queryString.includes('+')) {\r\n      queryString = queryString.replace('+', '%2B');\r\n    }\r\n\r\n    return queryString;\r\n  };\r\n\r\n  const constructTableParameters = (parameters) => {\r\n    setTableParameters({\r\n      organisationFilter: parameters.organisationFilter,\r\n      organisationFilterValue: parameters.organisationFilterValue,\r\n      groupFilter: parameters.groupFilter,\r\n      groupFilterValue: parameters.groupFilterValue,\r\n      runsFilter: parameters.runsFilter,\r\n      runsFilterValue: parameters.runsFilterValue,\r\n      topRatedFilter: parameters.topRatedFilter,\r\n      topRatedFilterValue: parameters.topRatedFilterValue,\r\n      timeZoneFilter: parameters.timeZoneFilter,\r\n      timeZoneFilterValue: parameters.timeZoneFilterValue,\r\n      channelFilter: parameters.channelFilter,\r\n      channelFilterValue: parameters.channelFilterValue,\r\n      statusFilter: parameters.statusFilter,\r\n    });\r\n  };\r\n\r\n  const constructTableHeaders = () => {\r\n    let items = ChannelStorage.tableHeaders;\r\n    if (isOrganisationAdmin) {\r\n      items = items.filter((item) => item.headerId !== 1);\r\n    }\r\n\r\n    setTableHeaders(items);\r\n  };\r\n\r\n  const constructData = (selectedData, type) => {\r\n    let items = selectedData;\r\n    if (type === 'TABLE') {\r\n      items = items.map((item) => ({\r\n        channelId: item.channelId,\r\n        organisationName: isOrganisationAdmin\r\n          ? `hidden:${item.organisationName}`\r\n          : item.organisationName,\r\n        channelName: item.channelName,\r\n        status: item.status,\r\n        timeZone: item.timeZone,\r\n        channelGroupName: item.channelGroupName,\r\n        maxRuns: item.maxRuns,\r\n        topX: item.topX,\r\n      }));\r\n    } else if (type === 'FORM') {\r\n      items = items.map((item) => ({\r\n        channelId: item.channelId,\r\n        organisationName: isOrganisationAdmin\r\n          ? `hidden:${item.organisationName}`\r\n          : item.organisationName,\r\n        channelName: item.channelName,\r\n        status: item.status,\r\n        timeZone: item.timeZone,\r\n        channelGroupName: item.channelGroupName,\r\n        maxRuns: item.maxRuns,\r\n        topX: item.topX,\r\n        code: item.code,\r\n        organisationID: item.organisationID,\r\n      }));\r\n    }\r\n\r\n    return items;\r\n  };\r\n\r\n  const handleGetChannels = () => {\r\n    setIsLoading(true);\r\n    ChannelService.getChannels(constructQueryParameters(queryParameters))\r\n      .then((response) => {\r\n        setData(constructData(response.data.channels, 'TABLE'));\r\n        setChannels(constructData(response.data.channels, 'FORM'));\r\n        setPaginationParameters({\r\n          totalCount: response.data.totalCount,\r\n          pageSize: response.data.pageSize,\r\n          currentPage: response.data.currentPage,\r\n          totalPages: response.data.totalPages,\r\n        });\r\n      })\r\n      .finally(() => setIsLoading(false));\r\n  };\r\n\r\n  const handleOnExport = () => {\r\n    if (!isExporting) {\r\n      const { organisationName } = AuthService.getUserIdentity();\r\n      setIsExporting(true);\r\n\r\n      ChannelService.exportChannels(constructQueryParameters(queryParameters))\r\n        .then((response) => {\r\n          const blob = new Blob([response.data], {\r\n            type:\r\n              'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\r\n          });\r\n          saveAs(\r\n            blob,\r\n            `${\r\n              organisationName ? `${organisationName.toLowerCase()}_` : ''\r\n            }op2mise_channels_data_export_${DateService.toExportFormat(\r\n              new Date(),\r\n            )}.xlsx`,\r\n          );\r\n        })\r\n        .finally(() => setIsExporting(false));\r\n    }\r\n  };\r\n\r\n  const handleOnFilter = (selectedData) => {\r\n    setQueryParameters({ ...queryParameters, ...selectedData, pageNumber: 1 });\r\n  };\r\n\r\n  const handleOnClearFilter = () => {\r\n    setQueryParameters({\r\n      pageNumber: 1,\r\n      pageSize: queryParameters.pageSize,\r\n      searchKey: queryParameters.searchKey,\r\n    });\r\n  };\r\n\r\n  const handleOnSearch = (searchKey) => {\r\n    setQueryParameters({ ...queryParameters, searchKey, pageNumber: 1 });\r\n  };\r\n\r\n  const handleOnSort = ({ sortBy, sortOrder }) => {\r\n    setSortParameters({ order: sortOrder, sort: sortBy });\r\n    setQueryParameters({ ...queryParameters, sortBy, sortOrder });\r\n  };\r\n\r\n  const handleOnPaginate = (pageNumber, pageSize) => {\r\n    setQueryParameters({ ...queryParameters, pageNumber, pageSize });\r\n  };\r\n\r\n  const openAddPanel = () => {\r\n    setShowAddPanel(true);\r\n    setSelectedChannel();\r\n  };\r\n\r\n  const handleSelectData = (selectedData) => {\r\n    setSelectedChannel(selectedData);\r\n\r\n    setShowAddPanel(false);\r\n  };\r\n\r\n  const hidePanel = () => {\r\n    setSelectedChannel();\r\n    setShowAddPanel(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    constructTableHeaders();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    constructTableParameters(queryParameters);\r\n    handleGetChannels();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [queryParameters]);\r\n\r\n  return (\r\n    <>\r\n      <BannerComponent\r\n        componentName=\"Channels\"\r\n        isAddButtonHidden={false}\r\n        addButtonText=\"New Channel\"\r\n        callbackAddButtonFunction={openAddPanel}\r\n        handleSearch={handleOnSearch}\r\n      />\r\n\r\n      <hr style={{ borderTop: '1px  solid #b1b1b1', marginBottom: '8px' }} />\r\n\r\n      <div className=\"d-flex\">\r\n        <Table\r\n          noDataVerbiage=\"No channels found\"\r\n          headers={tableHeaders}\r\n          list={data}\r\n          isExporting={isExporting}\r\n          isFetchingData={isLoading}\r\n          queryParameters={tableParameters}\r\n          paginationParameters={paginationParameters}\r\n          sortParameters={sortParameters}\r\n          onFilter={handleOnFilter}\r\n          onClearFilters={handleOnClearFilter}\r\n          onSort={handleOnSort}\r\n          onPaginate={handleOnPaginate}\r\n          onExport={handleOnExport}\r\n          onDoubleClickSelectData={handleSelectData}\r\n        />\r\n\r\n        {showAddPanel && (\r\n          <AddChannelComponent\r\n            channels={channels}\r\n            callbackGetChannels={handleGetChannels}\r\n            callbackClosePanel={hidePanel}\r\n          />\r\n        )}\r\n\r\n        {selectedChannel && (\r\n          <EditDeleteChannelComponent\r\n            channels={channels}\r\n            selectedChannel={selectedChannel}\r\n            callbackGetChannels={handleGetChannels}\r\n            callbackClosePanel={hidePanel}\r\n          />\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ChannelComponent;\r\n","import axios from 'axios';\r\n\r\nconst ChannelService = {\r\n  addChannel(json) {\r\n    const url = `${process.env.REACT_APP_HOST_URL}Channel/AddChannel`;\r\n    return axios.post(url, json);\r\n  },\r\n\r\n  updateChannel(ID, json) {\r\n    const url = `${process.env.REACT_APP_HOST_URL}Channel/EditChannel/${ID}`;\r\n    return axios.put(url, json);\r\n  },\r\n\r\n  getChannelGroups(parameters) {\r\n    const url = `${process.env.REACT_APP_HOST_URL}ChannelGroup/GetChannelGroupLookup${parameters}`;\r\n    return axios.get(url);\r\n  },\r\n\r\n  getChannel(ID) {\r\n    const url = `${process.env.REACT_APP_HOST_URL}Channel/GetChannelById/${ID}`;\r\n    return axios.get(url);\r\n  },\r\n\r\n  exportChannels(parameters) {\r\n    const url = `${process.env.REACT_APP_HOST_URL}Channel/Export${parameters}`;\r\n    return axios.get(url, { responseType: 'arraybuffer' });\r\n  },\r\n\r\n  getOrganisations() {\r\n    const url = `${process.env.REACT_APP_HOST_URL}Organisation/GetAllOrganisations`;\r\n    return axios.get(url);\r\n  },\r\n\r\n  getChannels(parameters) {\r\n    const url = `${process.env.REACT_APP_HOST_URL}Channel/GetChannelList${parameters}`;\r\n    return axios.get(url);\r\n  },\r\n  getTimezoneLookup() {\r\n    const url = `${process.env.REACT_APP_HOST_URL}Channel/GetTimeZoneLookup`;\r\n    return axios.get(url);\r\n  },\r\n\r\n  exportSampleTemplate() {\r\n    const url = `${process.env.REACT_APP_HOST_URL}Channel/SampleDataExport`;\r\n    return axios.get(url, { responseType: 'arraybuffer' });\r\n  },\r\n};\r\n\r\n// const channelService = new ChannelService();\r\nexport default ChannelService;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"timeInput\":\"styles_timeInput__GBAx4\",\"timeInputWrapper\":\"styles_timeInputWrapper__GFyGF\",\"hourInput\":\"styles_hourInput__I3zdk\",\"minuteInput\":\"styles_minuteInput__NrxBH\",\"inputDivider\":\"styles_inputDivider__QJbWQ\",\"invalidInput\":\"styles_invalidInput__M3CH7\",\"errorMessage\":\"styles_errorMessage__SVjpw\",\"disabledInput\":\"styles_disabledInput__ngBKX\"};","import { forwardRef, useEffect, useRef, useState } from 'react';\r\nimport moment from 'moment';\r\nimport styles from './styles.module.css';\r\n\r\nconst CustomTimeInput = forwardRef(\r\n  (\r\n    {\r\n      value,\r\n      onChange,\r\n      disabled,\r\n      validate,\r\n      onValidate,\r\n      errorMessage,\r\n      clearValues,\r\n      min,\r\n      max,\r\n      defaultValue,\r\n      customWrapper,\r\n      channelForms,\r\n    },\r\n    ref\r\n  ) => {\r\n    const hourInputRef = useRef();\r\n    const minuteInputRef = useRef();\r\n    const [isChanged, setIsChanged] = useState(false);\r\n    const [hour, setHour] = useState('');\r\n    const [minute, setMinute] = useState('');\r\n    const [changeTimes, setChangeTimes] = useState(0);\r\n    const [isInvalid, setIsInvalid] = useState(false);\r\n    const shouldValidate = typeof onValidate === 'function' && validate;\r\n\r\n    // Restricting characters that is not convertable to number\r\n    const getNumbersOnly = (string) => {\r\n      const stringArray = string.split('');\r\n      const result = stringArray.filter(\r\n        (char) => !isNaN(char) && !isNaN(parseFloat(char))\r\n      );\r\n      return result.join('');\r\n    };\r\n\r\n    // Change cursor\r\n    const focusToHour = () => {\r\n      setTimeout(() => {\r\n        hourInputRef.current.focus();\r\n        hourInputRef.current.select();\r\n      }, 1);\r\n    };\r\n\r\n    const focusToMinute = () => {\r\n      setTimeout(() => {\r\n        minuteInputRef.current.focus();\r\n        minuteInputRef.current.select();\r\n      }, 1);\r\n    };\r\n\r\n    const handleOnFocus = (e) => e.target.select();\r\n\r\n    const handleOnClick = (e) => e.stopPropagation();\r\n\r\n    const handleOnBlur = () => setChangeTimes(0);\r\n\r\n    // Checking and setting values\r\n    const isTwoDigit = (value) => value.length === 3;\r\n\r\n    const pad = (value) => {\r\n      if (value.length === 1) return `0${value}`;\r\n      else if (value[0] === '0') return value.substring(1, 3);\r\n      else return value;\r\n    };\r\n\r\n    const isValueValid = (value, inputName) => {\r\n      const number = parseInt(value);\r\n      if (inputName === 'hour') return number <= 23;\r\n      else return number <= 59;\r\n    };\r\n\r\n    const handleOnChange = (e) => {\r\n      const name = e.target.name;\r\n      let value = getNumbersOnly(e.target.value);\r\n      value = pad(value);\r\n      const isFirstDigitZero = value[0] === '0';\r\n      const isNotValid = value && !isValueValid(value, name);\r\n\r\n      if (\r\n        name === 'hour' &&\r\n        (changeTimes === 1 || value.length === 3) &&\r\n        (value.length === 2 || isNotValid)\r\n      )\r\n        focusToMinute();\r\n      if (!isFirstDigitZero && (isTwoDigit(value) || isNotValid)) return false;\r\n\r\n      if (name === 'hour') {\r\n        setHour(value);\r\n        if (!hour && !minute) setMinute('00');\r\n      } else setMinute(value);\r\n      setChangeTimes(changeTimes + 1);\r\n      setIsChanged(true);\r\n    };\r\n\r\n    const constructTime = (value) => {\r\n      const date = new Date(value);\r\n      const dateHour = date.getHours();\r\n      const dateMinute = date.getMinutes();\r\n      const dateHourValue = pad(dateHour.toString());\r\n      const dateMinuteValue = pad(dateMinute.toString());\r\n      setHour(dateHourValue);\r\n      setMinute(dateMinuteValue);\r\n    };\r\n\r\n    // Keyboard arrow navigations\r\n    const onKeyDownHour = (e) => {\r\n      if (e.key === 'ArrowRight') focusToMinute();\r\n      if (e.key === 'ArrowUp') {\r\n        let incremented = parseInt(hour) + 1;\r\n        if (incremented <= 23) setHour(pad(incremented.toString()));\r\n      }\r\n      if (e.key === 'ArrowDown') {\r\n        let decremented = parseInt(hour) - 1;\r\n        if (decremented >= 0) setHour(pad(decremented.toString()));\r\n      }\r\n      if (e.key === 'Backspace') {\r\n        setHour('');\r\n        setChangeTimes(0);\r\n        setIsChanged(true);\r\n      }\r\n    };\r\n\r\n    const onKeyDownMinute = (e) => {\r\n      if (e.key === 'ArrowLeft') focusToHour();\r\n      if (e.key === 'ArrowUp') {\r\n        let incremented = parseInt(minute) + 1;\r\n        if (incremented <= 59) setMinute(pad(incremented.toString()));\r\n      }\r\n      if (e.key === 'ArrowDown') {\r\n        let decremented = parseInt(minute) - 1;\r\n        if (decremented >= 0) setMinute(pad(decremented.toString()));\r\n      }\r\n      if (e.key === 'Backspace') {\r\n        setMinute('');\r\n        setIsChanged(true);\r\n      }\r\n    };\r\n\r\n    const checkIfOutsideOfMinMax = (time) => {\r\n      var isMaxTime = false;\r\n      if (max) {\r\n        let dateSplit = max.toLocaleString().split(' ');\r\n        isMaxTime = dateSplit[2] == 'AM' && dateSplit[1] == '12:00:00';\r\n      }\r\n      return (\r\n        (min ? time < min : false) || (max ? time > max && !isMaxTime : false)\r\n      );\r\n    };\r\n\r\n    useEffect(() => {\r\n      if (defaultValue) {\r\n        const isValidDate = defaultValue && moment(defaultValue).isValid();\r\n        if (isValidDate) constructTime(defaultValue);\r\n      }\r\n    }, [defaultValue]);\r\n\r\n    useEffect(() => {\r\n      if(channelForms){\r\n        if ((value && !isChanged) || !hour || !minute) {\r\n          const isValidDate = value && moment(value).isValid();\r\n          if (isValidDate) constructTime(value);\r\n        }\r\n        else if(!value){\r\n          setHour('');\r\n          setMinute('');\r\n        }\r\n      }\r\n      else{\r\n      if ((value && !isChanged) || !hour || !minute) {\r\n        const isValidDate = value && moment(value).isValid();\r\n        if (isValidDate) constructTime(value);\r\n      }\r\n    }\r\n    }, [value]);\r\n\r\n    useEffect(() => {\r\n      if (isChanged) {\r\n        if (hour && minute) {\r\n          const time = new Date(\r\n            0,\r\n            0,\r\n            0,\r\n            parseInt(hour),\r\n            parseInt(minute),\r\n            0,\r\n            0\r\n          );\r\n          if (typeof onChange === 'function') onChange(time);\r\n          const isOutSideOfMinMax = checkIfOutsideOfMinMax(time);\r\n          if (typeof onValidate === 'function') onValidate(isOutSideOfMinMax);\r\n        } else {\r\n          if (typeof onChange === 'function') onChange(null);\r\n          setIsInvalid(!hour || !minute);\r\n          if (typeof onValidate === 'function') onValidate(!hour || !minute);\r\n        }\r\n      } else {\r\n        if (typeof onValidate === 'function') onValidate(false);\r\n      }\r\n    }, [hour, minute]);\r\n\r\n    useEffect(() => {\r\n      if (clearValues) {\r\n        setHour('');\r\n        setMinute('');\r\n      }\r\n    }, [clearValues]);\r\n\r\n    return (\r\n      <div className={styles.timeInput}>\r\n        <div\r\n          ref={ref}\r\n          className={`\r\n                    ${styles.timeInputWrapper}\r\n                    ${shouldValidate && !disabled && styles.invalidInput}\r\n                    ${disabled && styles.disabledInput}\r\n                    ${customWrapper && customWrapper}\r\n                `}\r\n          onClick={focusToHour}\r\n        >\r\n          <input\r\n            ref={hourInputRef}\r\n            className={styles.hourInput}\r\n            style={{ marginLeft: hour && '-5px' }}\r\n            value={hour}\r\n            name=\"hour\"\r\n            type=\"text\"\r\n            placeholder=\"HH\"\r\n            autoComplete=\"off\"\r\n            onChange={handleOnChange}\r\n            onKeyDown={onKeyDownHour}\r\n            onFocus={handleOnFocus}\r\n            onClick={handleOnClick}\r\n            onBlur={handleOnBlur}\r\n            disabled={disabled}\r\n          />\r\n          <span className={styles.inputDivider}>:</span>\r\n          <input\r\n            ref={minuteInputRef}\r\n            className={styles.minuteInput}\r\n            value={minute}\r\n            name=\"minute\"\r\n            type=\"text\"\r\n            placeholder=\"MM\"\r\n            autoComplete=\"off\"\r\n            onChange={handleOnChange}\r\n            onKeyDown={onKeyDownMinute}\r\n            onFocus={handleOnFocus}\r\n            onClick={handleOnClick}\r\n            onBlur={handleOnBlur}\r\n            disabled={disabled}\r\n          />\r\n        </div>\r\n        {shouldValidate && isInvalid && !disabled && (\r\n          <span className={styles.errorMessage}>{errorMessage}</span>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nexport default CustomTimeInput;\r\n"],"names":["tableHeaders","headerId","headerName","filter","type","queryNames","sortable","list","id","name","formFields","parameterName","placeHolder","isRequired","maxLength","editFormFields","statusList","checkString","text","undefined","timeIntervals","value","getNumbersOnly","string","split","char","isNaN","parseFloat","join","AddChannelComponent","callbackClosePanel","callbackGetChannels","channels","ChannelStorage","useState","errorMessage","setErrorMessage","isSubmitting","setIsSubmitting","channelName","organisationID","channelGroupID","indicatorStatus","timeZoneID","timeInterval","code","systemName","dayHourStart","frameRate","parameters","setParameters","selectedOrganisation","setSelectedOrganisation","organisations","setOrganisations","selectedChannelGroup","setSelectedChannelGroup","selectedTimeInterval","setSelectedTimeInterval","selectedStatus","setSelectedStatus","channelGroups","setChannelGroups","selectedTimeZone","setSelectedTimeZone","timezones","setTimezones","organisation","channelGroup","timeZone","validation","setValidation","channelNameErrorText","setChannelNameErrorText","organisationErrorText","setOrganisationErrorText","channelGroupErrorText","setChannelGroupErrorText","timezoneErrorText","setTimezoneErrorText","codeErrorText","setCodeErrorText","dayHourStartErrorText","setDayHourStartErrorText","validateAndClampValue","max","StringService","String","Math","min","parseInt","addLeadingZero","number","numberString","toString","length","ConvertToHHMMSS","inputTime","hours","minutes","onChangeParameters","e","target","prevState","validateChannel","organisationId","valid","some","channel","toLowerCase","trim","handleCheckCode","handleSubmit","stringNumber","ChannelService","then","success","catch","error","responseMessage","response","data","message","danger","finally","getChannelGroups","organisationFilter","responseChanneGroups","channelGroupOptions","map","push","channelGroupId","channelGroupName","selectOrganisation","selected","selectStatus","selectChannelGroup","selectTimeInterval","selectTimezone","useEffect","organisationArray","responseOrganisations","organisationOptions","responseData","defaultData","item","AuthService","organisationFilterValue","organisationName","queryString","spanErrorText","field","spanHasError","className","Styles","src","closeIcon","alt","onClick","onKeyDown","role","style","width","top","LoadingComponent","hidden","placeholder","onChange","evt","key","preventDefault","CustomTimeInput","getHours","minutesWithLeadingNumber","getMinutes","hoursMinutes","changeTime","label","onSelect","disabled","withSearch","height","marginBottom","pointerEvent","title","saveIcon","closeCircleIcon","defaultProps","EditDeleteChannelComponent","selectedChannel","channelId","originalTimeInterval","setOriginalTimeInterval","showTimeIntervalConfirmationModal","setShowTimeIntervalConfirmationModal","maxRuns","topX","channelGroupInfo","setChannelGroupInfo","modalShow","setModalShow","isLoading","setIsLoading","convertToStringDayHourStart","parametersClone","validateChannelGroup","handleEditSubmit","proceed","onHideTimeIntervalConfirmationModal","ConvertTimeStringToDate","timeString","currentDate","Date","setHours","setMinutes","status","channelID","dateCreated","DateService","timeZoneName","predefinedTimeInterval","o","UserStyles","fontSize","display","verticalAlign","channelForms","Modal","size","show","onHide","padding","textAlign","paddingTop","centered","fontWeight","Button","defaultBtn","isOrganisationAdmin","isExporting","setIsExporting","setSelectedChannel","setTableHeaders","setData","queryParameters","setQueryParameters","tableParameters","setTableParameters","paginationParameters","setPaginationParameters","order","sort","sortParameters","setSortParameters","showAddPanel","setShowAddPanel","setChannels","constructQueryParameters","pagination","pageNumber","pageSize","group","groupFilter","groupFilterValue","runs","runsFilter","runsFilterValue","topRated","topRatedFilter","topRatedFilterValue","channelFilter","channelFilterValue","timeZoneFilter","timeZoneFilterValue","includes","replace","statusFilter","sortOrder","sortBy","searchKey","useCache","constructData","selectedData","items","handleGetChannels","totalCount","currentPage","totalPages","hidePanel","constructTableHeaders","BannerComponent","componentName","isAddButtonHidden","addButtonText","callbackAddButtonFunction","handleSearch","borderTop","Table","noDataVerbiage","headers","isFetchingData","onFilter","onClearFilters","onSort","onPaginate","onExport","blob","Blob","saveAs","onDoubleClickSelectData","addChannel","json","url","process","axios","updateChannel","ID","getChannel","exportChannels","responseType","getOrganisations","getChannels","getTimezoneLookup","exportSampleTemplate","forwardRef","ref","validate","onValidate","clearValues","defaultValue","customWrapper","hourInputRef","useRef","minuteInputRef","isChanged","setIsChanged","hour","setHour","minute","setMinute","changeTimes","setChangeTimes","isInvalid","setIsInvalid","shouldValidate","focusToHour","setTimeout","current","focus","select","focusToMinute","handleOnFocus","handleOnClick","stopPropagation","handleOnBlur","pad","substring","handleOnChange","isFirstDigitZero","isNotValid","inputName","isValueValid","isTwoDigit","constructTime","date","dateHour","dateMinute","dateHourValue","dateMinuteValue","moment","isValid","time","isOutSideOfMinMax","isMaxTime","dateSplit","toLocaleString","checkIfOutsideOfMinMax","styles","marginLeft","autoComplete","incremented","decremented","onFocus","onBlur"],"sourceRoot":""}