{"version":3,"file":"static/js/439.1e6106c8.chunk.js","mappings":"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","sources":["components/channel-group/ChannelGroupService.js","components/channel-group/ChannelGroupStorage.js","webpack://sky/./src/components/channel-group/ChannelGroup.module.css?84d2","components/channel-group/add-channelgroup/AddChannelGroupComponent.jsx","webpack://sky/./src/components/channel-group/edit-delete-channelgroup/EditDeleteChannelGroup.module.css?ba88","components/channel-group/edit-delete-channelgroup/EditDeleteChannelGroupComponent.jsx","components/channel-group/ChannelGroupComponent.jsx"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst ChannelGroupTestService = {\r\n  addChannelGroup(json) {\r\n    const url = `${process.env.REACT_APP_HOST_URL}ChannelGroup/AddChannelGroup`;\r\n    return axios.post(url, json);\r\n  },\r\n\r\n  updateChannelGroup(ID, json) {\r\n    const url = `${process.env.REACT_APP_HOST_URL}ChannelGroup/${ID}`;\r\n    return axios.put(url, json);\r\n  },\r\n\r\n  getChannelGroups(parameters) {\r\n    const url = `${process.env.REACT_APP_HOST_URL}ChannelGroup${parameters}`;\r\n    return axios.get(url);\r\n  },\r\n\r\n  getChannelGroup(ID) {\r\n    const url = `${process.env.REACT_APP_HOST_URL}ChannelGroup/${ID}`;\r\n    return axios.get(url);\r\n  },\r\n\r\n  exportChannelGroups(parameters) {\r\n    const url = `${process.env.REACT_APP_HOST_URL}ChannelGroup/Export${parameters}`;\r\n    return axios.get(url, { responseType: 'arraybuffer' });\r\n  },\r\n\r\n  getOrganisations() {\r\n    const url = `${process.env.REACT_APP_HOST_URL}Organisation/GetAllOrganisations`;\r\n    return axios.get(url);\r\n  },\r\n\r\n  getChannels(parameters) {\r\n    const url = `${process.env.REACT_APP_HOST_URL}Channel/GetChannelList${parameters}`;\r\n    return axios.get(url);\r\n  },\r\n\r\n  getChannelsByGroup(ID) {\r\n    const url = `${process.env.REACT_APP_HOST_URL}Channel/GetChannelByGroup?id=${ID}`;\r\n    return axios.get(url);\r\n  },\r\n};\r\n\r\n// const channelGroupService = new ChannelGroupTestService();\r\nexport default ChannelGroupTestService;\r\n","const ChannelGroupTestStorage = {\r\n  tableHeaders: [\r\n    {\r\n      headerId: 1,\r\n      headerName: 'Organisation',\r\n      filter: {\r\n        type: 1,\r\n        queryNames: ['organisationFilter', 'organisationFilterValue'],\r\n      },\r\n      sortable: true,\r\n    },\r\n    {\r\n      headerId: 2,\r\n      headerName: 'Group',\r\n      filter: {\r\n        type: 1,\r\n        queryNames: ['groupFilter', 'groupFilterValue'],\r\n      },\r\n      sortable: true,\r\n    },\r\n    {\r\n      headerId: 6,\r\n      headerName: 'Status',\r\n      filter: {\r\n        type: 2,\r\n        queryNames: ['statusFilter'],\r\n        list: [\r\n          { id: 1, name: 'Active' },\r\n          { id: 2, name: 'Inactive' },\r\n        ],\r\n      },\r\n      sortable: true,\r\n    },\r\n    {\r\n      headerId: 3,\r\n      headerName: 'Runs',\r\n      filter: {\r\n        type: 5,\r\n        queryNames: ['runsFilter', 'runsFilterValue'],\r\n      },\r\n      sortable: true,\r\n    },\r\n    {\r\n      headerId: 4,\r\n      headerName: 'Top Rated',\r\n      filter: {\r\n        type: 5,\r\n        queryNames: ['topRatedFilter', 'topRatedFilterValue'],\r\n      },\r\n      sortable: true,\r\n    },\r\n    {\r\n      headerId: 5,\r\n      headerName: 'Channel(s)',\r\n      filter: {\r\n        type: 1,\r\n        queryNames: ['channelFilter', 'channelFilterValue'],\r\n      },\r\n      sortable: true,\r\n    },\r\n  ],\r\n\r\n  formFields: [\r\n    {\r\n      name: 'Organisation',\r\n      parameterName: 'organisationID',\r\n      type: 'text',\r\n      placeHolder: 'Enter the organisation name',\r\n      isRequired: true,\r\n      maxLength: 99,\r\n    },\r\n    {\r\n      name: 'Status',\r\n      parameterName: 'status',\r\n      type: 'text',\r\n      placeHolder: 'Enter the Status',\r\n      isRequired: true,\r\n      maxLength: 99,\r\n    },\r\n    {\r\n      name: 'Channel Group Name',\r\n      parameterName: 'name',\r\n      type: 'text',\r\n      placeHolder: 'Enter the channel group name',\r\n      isRequired: true,\r\n      maxLength: 99,\r\n    },\r\n    {\r\n      name: 'Number of schedule runs',\r\n      parameterName: 'maxRuns',\r\n      type: 'number',\r\n      placeHolder: 'Enter the number of schedule runs',\r\n      isRequired: true,\r\n      maxLength: 99,\r\n    },\r\n    {\r\n      name: 'Number of top rated schedules',\r\n      parameterName: 'topX',\r\n      type: 'number',\r\n      placeHolder: 'Enter the number of top rated schedules',\r\n      isRequired: true,\r\n      maxLength: 99,\r\n    },\r\n  ],\r\n\r\n  editFormFields: [\r\n    {\r\n      name: 'Organisation',\r\n      parameterName: 'organisationID',\r\n      type: 'text',\r\n      placeHolder: 'Enter the organisation name',\r\n      isRequired: true,\r\n      maxLength: 99,\r\n    },\r\n    {\r\n      name: 'Status',\r\n      parameterName: 'status',\r\n      type: 'text',\r\n      placeHolder: 'Enter the Status',\r\n      isRequired: true,\r\n      maxLength: 99,\r\n    },\r\n    {\r\n      name: 'Channel Group Name',\r\n      parameterName: 'name',\r\n      type: 'text',\r\n      placeHolder: 'Enter the channel group name',\r\n      isRequired: true,\r\n      maxLength: 99,\r\n    },\r\n    {\r\n      name: 'Number of schedule runs',\r\n      parameterName: 'maxRuns',\r\n      type: 'number',\r\n      placeHolder: 'Enter the number of schedule runs',\r\n      isRequired: true,\r\n      maxLength: 99,\r\n    },\r\n    {\r\n      name: 'Number of top rated schedules',\r\n      parameterName: 'topX',\r\n      type: 'number',\r\n      placeHolder: 'Enter the number of top rated schedules',\r\n      isRequired: true,\r\n      maxLength: 99,\r\n    },\r\n  ],\r\n\r\n  statusList: [\r\n    {\r\n      id: '1',\r\n      name: 'Active',\r\n    },\r\n    {\r\n      id: '2',\r\n      name: 'Inactive',\r\n    },\r\n  ],\r\n\r\n  checkString(text) {\r\n    return text !== '' && text !== null && text !== undefined;\r\n  },\r\n  maxRuns: 2140000000,\r\n};\r\n\r\n// const channelGroupTestStorage = new ChannelGroupTestStorage();\r\nexport default ChannelGroupTestStorage;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"box\":\"ChannelGroup_box__uku-3\",\"closeIcon\":\"ChannelGroup_closeIcon__1LcTE\",\"headerText\":\"ChannelGroup_headerText__82h2U\",\"userPhoto\":\"ChannelGroup_userPhoto__JGXK6\",\"uploadPhotoButton\":\"ChannelGroup_uploadPhotoButton__6dKVw\",\"formLabel\":\"ChannelGroup_formLabel__YgPvh\",\"formInput\":\"ChannelGroup_formInput__I-jwk\",\"roleButton\":\"ChannelGroup_roleButton__FSKmM\",\"saveIcon\":\"ChannelGroup_saveIcon__mDOwF\",\"trashcanIcon\":\"ChannelGroup_trashcanIcon__v3-aU\",\"closeCircleIcon\":\"ChannelGroup_closeCircleIcon__me5aj\",\"hasError\":\"ChannelGroup_hasError__DGQqD\",\"required\":\"ChannelGroup_required__diJVT\",\"loadingHeight\":\"ChannelGroup_loadingHeight__pyzAm\",\"formCheck\":\"ChannelGroup_formCheck__h6ZKK\",\"formWrapper\":\"ChannelGroup_formWrapper__Bbkn+\"};","import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Styles from '../ChannelGroup.module.css';\r\n\r\nimport closeIcon from '../../../assets/icons/Close.svg';\r\nimport saveIcon from '../../../assets/icons/Save.svg';\r\nimport closeCircleIcon from '../../../assets/icons/Close-Circle.svg';\r\n\r\nimport ChannelGroupService from '../ChannelGroupService';\r\nimport ChannelGroupStorage from '../ChannelGroupStorage';\r\nimport SelectComponent from '../../../shared/elements/select/select.component';\r\nimport {\r\n  success,\r\n  danger,\r\n} from '../../../shared/elements/notification/NotifyComponent';\r\nimport LoadingComponent from '../../_reusable/loading/LoadingComponent';\r\nimport AuthService from '../../../core/auth.service';\r\n\r\nfunction AddChannelGroupComponent({\r\n  callbackClosePanel,\r\n  callbackGetChannelGroups,\r\n  channelGroups,\r\n}) {\r\n  const { formFields } = ChannelGroupStorage;\r\n  const { checkString } = ChannelGroupStorage;\r\n  const { maxRuns } = ChannelGroupStorage;\r\n  const { statusList } = ChannelGroupStorage;\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [parameters, setParameters] = useState({\r\n    name: '',\r\n    organisationID: 0,\r\n    maxRuns: '',\r\n    topX: '',\r\n    indicatorStatus: 1,\r\n  });\r\n  const [selectedOrganisation, setSelectedOrganisation] = useState(\r\n    'Select Organisation',\r\n  );\r\n  const [selectedStatus, setSelectedStatus] = useState('Active');\r\n  // const [showOrganisationSelection, setShowOrganisationSelection] = useState(\r\n  //   false,\r\n  // );\r\n  const [organisations, setOrganisations] = useState([]);\r\n\r\n  const [validation, setValidation] = useState({\r\n    name: false,\r\n    organisation: false,\r\n    maxRuns: false,\r\n    topX: false,\r\n  });\r\n  const [nameErrorText, setNameErrorText] = useState('');\r\n  const [organisationErrorText, setOrganisationErrorText] = useState('');\r\n  const [maxRunsErrorText, setMaxRunsErrorText] = useState('');\r\n  const [topXErrorText, setTopXErrorText] = useState('');\r\n\r\n  const onChangeParameters = (e) => {\r\n    setParameters((prevState) => ({\r\n      ...prevState,\r\n      [e.target.name]: e.target.value,\r\n    }));\r\n  };\r\n\r\n  const handleCheck = (value, organisationID) => channelGroups.some(\r\n    (channelGroup) => channelGroup.channelGroupName.toLowerCase()\r\n          === value.trim().toLowerCase()\r\n        && channelGroup.organisationID === organisationID,\r\n  );\r\n\r\n  const validateChannelGroup = () => {\r\n    let valid = true;\r\n    setValidation({\r\n      name: false,\r\n      organisation: false,\r\n      maxRuns: false,\r\n      topx: false,\r\n    });\r\n\r\n    setNameErrorText('');\r\n    setOrganisationErrorText('');\r\n    setMaxRunsErrorText('');\r\n    setTopXErrorText('');\r\n\r\n    if (parameters.organisationID === 0) {\r\n      valid = false;\r\n      setValidation((prevState) => ({\r\n        ...prevState,\r\n        organisation: true,\r\n      }));\r\n      setOrganisationErrorText('Organisation is required');\r\n    }\r\n\r\n    if (!checkString(parameters.name)) {\r\n      valid = false;\r\n      setValidation((prevState) => ({\r\n        ...prevState,\r\n        name: true,\r\n      }));\r\n      setNameErrorText('Channel group name is required');\r\n    } else if (handleCheck(parameters.name, parameters.organisationID)) {\r\n      valid = false;\r\n      setValidation((prevState) => ({\r\n        ...prevState,\r\n        name: true,\r\n      }));\r\n      setNameErrorText('Channel group name is used');\r\n    }\r\n\r\n    if (!checkString(parameters.maxRuns)) {\r\n      valid = false;\r\n      setValidation((prevState) => ({\r\n        ...prevState,\r\n        maxRuns: true,\r\n      }));\r\n      setMaxRunsErrorText('Number of schedule runs is required');\r\n    } else if (parseInt(parameters.maxRuns, 10) > maxRuns) {\r\n      valid = false;\r\n      setValidation((prevState) => ({\r\n        ...prevState,\r\n        maxRuns: true,\r\n      }));\r\n      setMaxRunsErrorText(`Maximum runs is ${maxRuns}`);\r\n    } else if (parseInt(parameters.maxRuns, 10) < 1) {\r\n      valid = false;\r\n      setValidation((prevState) => ({\r\n        ...prevState,\r\n        maxRuns: true,\r\n      }));\r\n      setMaxRunsErrorText('Minimum runs is 1');\r\n    }\r\n\r\n    if (!checkString(parameters.topX)) {\r\n      valid = false;\r\n      setValidation((prevState) => ({\r\n        ...prevState,\r\n        topX: true,\r\n      }));\r\n      setTopXErrorText('Number of top rated schedules is required');\r\n    } else if (parseInt(parameters.topX, 10) < 1) {\r\n      valid = false;\r\n      setValidation((prevState) => ({\r\n        ...prevState,\r\n        topX: true,\r\n      }));\r\n      setTopXErrorText('Minimum top rated is 1');\r\n    } else if (checkString(parameters.maxRuns)) {\r\n      if (parseInt(parameters.maxRuns, 10) < parseInt(parameters.topX, 10)) {\r\n        valid = false;\r\n        setValidation((prevState) => ({\r\n          ...prevState,\r\n          topX: true,\r\n        }));\r\n        setTopXErrorText('Cannot be more than the number of schedule runs');\r\n      }\r\n    }\r\n    return valid;\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    setErrorMessage('');\r\n\r\n    setIsSubmitting(true);\r\n    if (!isSubmitting) {\r\n      if (validateChannelGroup()) {\r\n        const channelGroupParameters = {\r\n          name: parameters.name,\r\n          organisationID: parameters.organisationID,\r\n          channelGroupId: parameters.channelGroupId,\r\n          maxRuns: parameters.maxRuns.toString(),\r\n          topX: parameters.topX.toString(),\r\n          indicatorStatus: parameters.indicatorStatus,\r\n        };\r\n        ChannelGroupService.addChannelGroup(channelGroupParameters)\r\n          .then(() => {\r\n            callbackClosePanel();\r\n            callbackGetChannelGroups();\r\n            success('Channel group created successfully');\r\n          })\r\n          .catch((error) => {\r\n            const responseMessage = error.response.data.message;\r\n            danger(responseMessage);\r\n          })\r\n          .finally(() => {\r\n            setIsSubmitting(false);\r\n          });\r\n      } else {\r\n        setIsSubmitting(false);\r\n        danger('Please check required fields');\r\n      }\r\n    }\r\n  };\r\n\r\n  const selectOrganisation = (selected) => {\r\n    // setShowOrganisationSelection(false);\r\n    setSelectedOrganisation(selected.name);\r\n    setParameters((prevState) => ({\r\n      ...prevState,\r\n      organisationID: selected.id,\r\n    }));\r\n  };\r\n\r\n  const selectStatus = (selected) => {\r\n    setSelectedStatus(selected.name);\r\n    setParameters((prevState) => ({\r\n      ...prevState,\r\n      indicatorStatus: selected.id,\r\n    }));\r\n  };\r\n\r\n  const getOrganisations = () => {\r\n    setIsSubmitting(true);\r\n    ChannelGroupService.getOrganisations().then((response) => {\r\n      const organisationArray = [];\r\n      const responseOrganisations = response.data.organisations;\r\n      const organisationOptions = [];\r\n      responseOrganisations.map((value) => {\r\n        organisationOptions.push({ id: value.id, name: value.name });\r\n        organisationArray.push(value.id);\r\n        return true;\r\n      });\r\n\r\n      setOrganisations(organisationOptions);\r\n      setIsSubmitting(false);\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    const { organisationId } = AuthService.getUserIdentity();\r\n    const isOrganisationalAdmin = AuthService.isOrganisationalAdmin();\r\n\r\n    setSelectedOrganisation('Select Organisation');\r\n    getOrganisations();\r\n    if (isOrganisationalAdmin) {\r\n      setParameters({\r\n        ...parameters,\r\n        organisationID: organisationId,\r\n      });\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const spanErrorText = (field) => {\r\n    if (field.parameterName === 'name') return nameErrorText;\r\n    if (field.parameterName === 'organisationID') return organisationErrorText;\r\n    if (field.parameterName === 'maxRuns') return maxRunsErrorText;\r\n    if (field.parameterName === 'topX') return topXErrorText;\r\n    return '';\r\n  };\r\n\r\n  const fieldHasError = (field) => {\r\n    if (field.parameterName === 'name') return validation.name;\r\n    if (field.parameterName === 'organisationID') return validation.organisation;\r\n    if (field.parameterName === 'maxRuns') return validation.maxRuns;\r\n    if (field.parameterName === 'topX') return validation.topX;\r\n    return false;\r\n  };\r\n\r\n  return (\r\n    <div className={Styles.box}>\r\n      <div className=\"position-relative\">\r\n        <i>\r\n          <img\r\n            className={Styles.closeIcon}\r\n            src={closeIcon}\r\n            alt=\"\"\r\n            onClick={() => callbackClosePanel()}\r\n            onKeyDown={() => callbackClosePanel()}\r\n            role=\"presentation\"\r\n          />\r\n        </i>\r\n      </div>\r\n\r\n      {isSubmitting ? (\r\n        <div\r\n          className=\"d-flex position-relative\"\r\n          style={{ width: '100%', top: '30%' }}\r\n        >\r\n          <LoadingComponent />\r\n        </div>\r\n      ) : (\r\n        <>\r\n          <div className={Styles.formWrapper}>\r\n            <div className=\"d-flex position-relative\">\r\n              <p className={Styles.headerText}>New Channel Group</p>\r\n            </div>\r\n\r\n            {formFields.map((field) => (\r\n              <div key={field.id}>\r\n                <div\r\n                  className={Styles.formLabel}\r\n                  hidden={\r\n                    field.name === 'Organisation'\r\n                    && AuthService.isOrganisationalAdmin()\r\n                  }\r\n                >\r\n                  {field.name}\r\n                  {' '}\r\n                  {field.isRequired ? (\r\n                    <span className={Styles.required}>*</span>\r\n                  ) : (\r\n                    undefined\r\n                  )}\r\n                </div>\r\n\r\n                <div>\r\n                  {field.parameterName === 'name' && (\r\n                    <input\r\n                      className={Styles.formInput}\r\n                      name={field.parameterName && field.parameterName}\r\n                      type={field.type}\r\n                      placeholder={field.placeHolder}\r\n                      onChange={onChangeParameters}\r\n                      maxLength={field.maxLength}\r\n                      onKeyDown={(evt) => evt.target.maxLength <= evt.target.value.length\r\n                        && evt.key !== 'Backspace'\r\n                        && evt.preventDefault()}\r\n                    />\r\n                  )}\r\n\r\n                  {field.type === 'number' && (\r\n                    <input\r\n                      className={Styles.formInput}\r\n                      name={field.parameterName && field.parameterName}\r\n                      type={field.type}\r\n                      placeholder={field.placeHolder}\r\n                      onChange={onChangeParameters}\r\n                      maxLength={field.maxLength}\r\n                      onKeyDown={(evt) => (evt.key === 'e'\r\n                          || evt.key === '+'\r\n                          || evt.key === '-'\r\n                          || evt.key === '.')\r\n                        && evt.preventDefault()}\r\n                    />\r\n                  )}\r\n                  {field.name === 'Organisation'\r\n                    && !AuthService.isOrganisationalAdmin() && (\r\n                      <SelectComponent\r\n                        label=\"\"\r\n                        text={selectedOrganisation}\r\n                        list={organisations}\r\n                        onSelect={selectOrganisation}\r\n                        width=\"100%\"\r\n                        disabled={false}\r\n                        withSearch\r\n                      />\r\n                  )}\r\n\r\n                  {field.parameterName === 'status' && (\r\n                    <SelectComponent\r\n                      label=\"\"\r\n                      text={selectedStatus}\r\n                      list={statusList}\r\n                      onSelect={selectStatus}\r\n                      width=\"100%\"\r\n                      disabled={false}\r\n                    />\r\n                  )}\r\n\r\n                  {fieldHasError(field) && (\r\n                    <span className={Styles.hasError}>\r\n                      {spanErrorText(field)}\r\n                    </span>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n\r\n          <div\r\n            className=\"position-absolute start-0 bottom-0 text-center\"\r\n            style={{\r\n              width: '100%',\r\n              height: '45px',\r\n              marginBottom: '10px',\r\n            }}\r\n          >\r\n            <i\r\n              className={Styles.saveIcon}\r\n              style={{ pointerEvent: isSubmitting && 'none' }}\r\n              data-toggle=\"tooltip\"\r\n              data-placement=\"top\"\r\n              title=\"Save new Channel Group\"\r\n            >\r\n              <img\r\n                src={saveIcon}\r\n                alt=\"\"\r\n                onClick={handleSubmit}\r\n                onKeyDown={handleSubmit}\r\n                role=\"presentation\"\r\n              />\r\n            </i>\r\n            <i\r\n              className={Styles.closeCircleIcon}\r\n              data-toggle=\"tooltip\"\r\n              data-placement=\"top\"\r\n              title=\"Cancel\"\r\n            >\r\n              <img\r\n                src={closeCircleIcon}\r\n                alt=\"\"\r\n                onClick={() => callbackClosePanel()}\r\n                onKeyDown={() => callbackClosePanel()}\r\n                role=\"presentation\"\r\n              />\r\n            </i>\r\n            {errorMessage !== '' && errorMessage}\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\nAddChannelGroupComponent.propTypes = {\r\n  callbackClosePanel: PropTypes.func.isRequired,\r\n  callbackGetChannelGroups: PropTypes.func.isRequired,\r\n  channelGroups: PropTypes.arrayOf(PropTypes.shape),\r\n};\r\nAddChannelGroupComponent.defaultProps = {\r\n  channelGroups: null,\r\n};\r\nexport default AddChannelGroupComponent;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"userPhoto\":\"EditDeleteChannelGroup_userPhoto__M90nl\",\"uploadPhotoButton\":\"EditDeleteChannelGroup_uploadPhotoButton__wSgsp\",\"userInfo\":\"EditDeleteChannelGroup_userInfo__WBbyx\",\"deleteButton\":\"EditDeleteChannelGroup_deleteButton__ZzBJV\",\"cancelButton\":\"EditDeleteChannelGroup_cancelButton__R-kQJ\",\"divLoadingPanel\":\"EditDeleteChannelGroup_divLoadingPanel__jVMHm\",\"formCheck\":\"EditDeleteChannelGroup_formCheck__qscDf\"};","import React, { useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Modal } from 'react-bootstrap';\r\nimport LoadingComponent from '../../_reusable/loading/LoadingComponent';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\nimport DateService from '../../../core/date.service';\r\nimport Styles from './EditDeleteChannelGroup.module.css';\r\nimport ChannelGroupStyles from '../ChannelGroup.module.css';\r\nimport closeCircleIcon from '../../../assets/icons/Close-Circle.svg';\r\nimport closeIcon from '../../../assets/icons/Close.svg';\r\nimport saveIcon from '../../../assets/icons/Save.svg';\r\nimport ChannelGroupService from '../ChannelGroupService';\r\nimport ChannelGroupStorage from '../ChannelGroupStorage';\r\nimport SelectComponent from '../../../shared/elements/select/select.component';\r\nimport {\r\n  success,\r\n  danger,\r\n} from '../../../shared/elements/notification/NotifyComponent';\r\nimport AuthService from '../../../core/auth.service';\r\n\r\nfunction EditDeleteChannelGroupComponent({\r\n  selectedChannelGroup,\r\n  callbackClosePanel,\r\n  callbackGetChannelGroups,\r\n  channelGroups,\r\n}) {\r\n  const formFields = ChannelGroupStorage.editFormFields;\r\n  const { checkString } = ChannelGroupStorage;\r\n  const { maxRuns } = ChannelGroupStorage;\r\n  const { statusList } = ChannelGroupStorage;\r\n\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [parameters, setParameters] = useState({\r\n    name: '',\r\n    organisationID: 0,\r\n    channelGroupId: 0,\r\n    maxRuns: false,\r\n    topX: false,\r\n    indicatorStatus: 1,\r\n  });\r\n  const [selectedOrganisation, setSelectedOrganisation] = useState(\r\n    'Select Organisation'\r\n  );\r\n  const [selectedStatus, setSelectedStatus] = useState('Select Status');\r\n  // const [showOrganisationSelection, setShowOrganisationSelection] = useState(\r\n  //   false,\r\n  // );\r\n  const [organisations, setOrganisations] = useState([]);\r\n\r\n  const [validation, setValidation] = useState({\r\n    name: false,\r\n    organisation: false,\r\n    maxRuns: false,\r\n    topX: false,\r\n  });\r\n  const [nameErrorText, setNameErrorText] = useState('');\r\n  const [organisationErrorText, setOrganisationErrorText] = useState('');\r\n  const [maxRunsErrorText, setMaxRunsErrorText] = useState('');\r\n  const [topXErrorText, setTopXErrorText] = useState('');\r\n  const [channelGroupInfo, setChannelGroupInfo] = useState({});\r\n  const [modalShow, setModalShow] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [modalChannelShow, setModalChannelShow] = useState(false);\r\n  const [channels, setChannels] = useState([]);\r\n\r\n  const onChangeParameters = (e) => {\r\n    setParameters((prevState) => ({\r\n      ...prevState,\r\n      [e.target.name]: e.target.value,\r\n    }));\r\n  };\r\n\r\n  const handleCheck = (value, organisationID) =>\r\n    channelGroups.some(\r\n      (channelGroup) =>\r\n        channelGroup.channelGroupName.toLowerCase() ===\r\n          value.trim().toLowerCase() &&\r\n        channelGroup.organisationID === organisationID &&\r\n        channelGroup.channelGroupId !== selectedChannelGroup.channelGroupId\r\n    );\r\n\r\n  const validateChannelGroup = () => {\r\n    let valid = true;\r\n    setValidation({\r\n      name: false,\r\n      organisation: false,\r\n      maxRuns: false,\r\n      topx: false,\r\n    });\r\n    setNameErrorText('');\r\n    setOrganisationErrorText('');\r\n    setMaxRunsErrorText('');\r\n    setTopXErrorText('');\r\n\r\n    if (parameters.organisationID === 0) {\r\n      valid = false;\r\n      setValidation((prevState) => ({\r\n        ...prevState,\r\n        organisation: true,\r\n      }));\r\n      setOrganisationErrorText('Organisation is required');\r\n    }\r\n\r\n    if (!checkString(parameters.name)) {\r\n      valid = false;\r\n      setValidation((prevState) => ({\r\n        ...prevState,\r\n        name: true,\r\n      }));\r\n      setNameErrorText('Channel group name is required');\r\n    } else if (handleCheck(parameters.name, parameters.organisationID)) {\r\n      valid = false;\r\n      setValidation((prevState) => ({\r\n        ...prevState,\r\n        name: true,\r\n      }));\r\n      setNameErrorText('Channel group name is used');\r\n    }\r\n\r\n    if (!checkString(parameters.maxRuns)) {\r\n      valid = false;\r\n      setValidation((prevState) => ({\r\n        ...prevState,\r\n        maxRuns: true,\r\n      }));\r\n      setMaxRunsErrorText('Number of schedule runs is required');\r\n    } else if (parseInt(parameters.maxRuns, 10) > maxRuns) {\r\n      valid = false;\r\n      setValidation((prevState) => ({\r\n        ...prevState,\r\n        maxRuns: true,\r\n      }));\r\n      setMaxRunsErrorText(`Maximum runs is ${maxRuns}`);\r\n    } else if (parseInt(parameters.maxRuns, 10) < 1) {\r\n      valid = false;\r\n      setValidation((prevState) => ({\r\n        ...prevState,\r\n        maxRuns: true,\r\n      }));\r\n      setMaxRunsErrorText('Minimum runs is 1');\r\n    }\r\n\r\n    if (!checkString(parameters.topX)) {\r\n      valid = false;\r\n      setValidation((prevState) => ({\r\n        ...prevState,\r\n        topX: true,\r\n      }));\r\n      setTopXErrorText('Number of top rated schedules is required');\r\n    } else if (parseInt(parameters.topX, 10) < 1) {\r\n      valid = false;\r\n      setValidation((prevState) => ({\r\n        ...prevState,\r\n        topX: true,\r\n      }));\r\n      setTopXErrorText('Minimum top rated is 1');\r\n    } else if (checkString(parameters.maxRuns)) {\r\n      if (parseInt(parameters.maxRuns, 10) < parseInt(parameters.topX, 10)) {\r\n        valid = false;\r\n        setValidation((prevState) => ({\r\n          ...prevState,\r\n          topX: true,\r\n        }));\r\n        setTopXErrorText('Cannot be more than the number of schedule runs');\r\n      }\r\n    }\r\n    return valid;\r\n  };\r\n\r\n  const handleEditSubmit = () => {\r\n    setErrorMessage('');\r\n    setIsSubmitting(true);\r\n    if (!isSubmitting) {\r\n      if (!validateChannelGroup()) {\r\n        danger('Please check required fields');\r\n        setIsSubmitting(false);\r\n      } else {\r\n        const channelGroupParameters = {\r\n          name: parameters.name,\r\n          organisationID: parameters.organisationID,\r\n          channelGroupId: parameters.channelGroupId,\r\n          maxRuns: parameters.maxRuns.toString(),\r\n          topX: parameters.topX.toString(),\r\n          indicatorStatus: parameters.indicatorStatus,\r\n        };\r\n        ChannelGroupService.updateChannelGroup(\r\n          selectedChannelGroup.channelGroupId,\r\n          channelGroupParameters\r\n        )\r\n          .then(() => {\r\n            callbackClosePanel();\r\n            callbackGetChannelGroups();\r\n            success('Channel group updated successfully');\r\n          })\r\n          .catch((error) => {\r\n            const responseMessage = error.response.data.message;\r\n            danger(responseMessage);\r\n          })\r\n          .finally(() => {\r\n            setIsSubmitting(false);\r\n          });\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleDeleteSubmit = () => {\r\n    // setErrorMessage('');\r\n    // setIsSubmitting(true);\r\n    // if (!isSubmitting) {\r\n    //   OrganisationService.deleteOrganisation(selectedOrganisation.id)\r\n    //     .then(() => {\r\n    //       callbackClosePanel();\r\n    //       callbackGetOrganisation();\r\n    //       success('Organisation deleted successfully');\r\n    //     })\r\n    //     .catch((error) => {\r\n    //       setErrorMessage(error.response.data.message);\r\n    //     })\r\n    //     .finally(() => {\r\n    //       setIsSubmitting(false);\r\n    //       setModalShow(false);\r\n    //     });\r\n    // }\r\n  };\r\n\r\n  const selectOrganisation = (selected) => {\r\n    // setShowOrganisationSelection(false);\r\n    setSelectedOrganisation(selected.name);\r\n    setParameters((prevState) => ({\r\n      ...prevState,\r\n      organisationID: selected.id,\r\n    }));\r\n  };\r\n\r\n  const selectStatus = (selected) => {\r\n    setSelectedStatus(selected.name);\r\n    setParameters((prevState) => ({\r\n      ...prevState,\r\n      indicatorStatus: selected.id,\r\n    }));\r\n  };\r\n\r\n  const getChannelGroup = () => {\r\n    ChannelGroupService.getChannelGroup(\r\n      selectedChannelGroup.channelGroupId\r\n    ).then((response) => {\r\n      setSelectedOrganisation(response.data.organisationName);\r\n      setSelectedStatus(response.data.status);\r\n      setParameters({\r\n        name: response.data.name,\r\n        organisationID: response.data.organisationID,\r\n        channelGroupId: selectedChannelGroup.channelGroupId,\r\n        maxRuns: response.data.maxRuns,\r\n        topX: response.data.topX,\r\n        indicatorStatus: response.data.indicatorStatus,\r\n      });\r\n      setChannelGroupInfo({\r\n        dateCreated: DateService.toLocalFormat(response.data.dateCreated),\r\n      });\r\n      setIsLoading(false);\r\n    });\r\n  };\r\n\r\n  const getOrganisations = () => {\r\n    setIsLoading(true);\r\n    ChannelGroupService.getOrganisations().then((response) => {\r\n      const organisationArray = [];\r\n      const responseOrganisations = response.data.organisations;\r\n      const organisationOptions = [];\r\n      responseOrganisations.map((value) => {\r\n        organisationOptions.push({ id: value.id, name: value.name });\r\n        organisationArray.push(value.id);\r\n        return true;\r\n      });\r\n\r\n      setOrganisations(organisationOptions);\r\n      getChannelGroup();\r\n    });\r\n  };\r\n\r\n  const getChannels = () => {\r\n    ChannelGroupService.getChannelsByGroup(parameters.channelGroupId).then(\r\n      (response) => {\r\n        setChannels(response.data.channels);\r\n        setModalChannelShow(true);\r\n      }\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    const { organisationId } = AuthService.getUserIdentity();\r\n    const isOrganisationalAdmin = AuthService.isOrganisationalAdmin();\r\n    setIsLoading(true);\r\n    getOrganisations();\r\n    if (isOrganisationalAdmin) {\r\n      setParameters({\r\n        ...parameters,\r\n        organisationID: organisationId,\r\n      });\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    getChannelGroup();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [selectedChannelGroup.channelGroupId]);\r\n\r\n  const spanErrorText = (field) => {\r\n    if (field.parameterName === 'name') return nameErrorText;\r\n    if (field.parameterName === 'organisationID') return organisationErrorText;\r\n    if (field.parameterName === 'maxRuns') return maxRunsErrorText;\r\n    if (field.parameterName === 'topX') return topXErrorText;\r\n    return '';\r\n  };\r\n\r\n  const fieldHasError = (field) => {\r\n    if (field.parameterName === 'name') return validation.name;\r\n    if (field.parameterName === 'organisationID')\r\n      return validation.organisation;\r\n    if (field.parameterName === 'maxRuns') return validation.maxRuns;\r\n    if (field.parameterName === 'topX') return validation.topX;\r\n    return false;\r\n  };\r\n\r\n  const inputFieldValue = (field) => {\r\n    if (field.parameterName === 'maxRuns') return parameters.maxRuns;\r\n    if (field.parameterName === 'topX') return parameters.topX;\r\n    return '';\r\n  };\r\n\r\n  return (\r\n    <div className={ChannelGroupStyles.box} style={{ minWidth: '364px' }}>\r\n      <div className=\"position-relative\">\r\n        <i>\r\n          <img\r\n            className={ChannelGroupStyles.closeIcon}\r\n            src={closeIcon}\r\n            alt=\"\"\r\n            onClick={() => callbackClosePanel()}\r\n            onKeyDown={() => callbackClosePanel()}\r\n            role=\"presentation\"\r\n          />\r\n        </i>\r\n      </div>\r\n\r\n      {isLoading ? (\r\n        <div\r\n          className={`${Styles.divLoadingPanel}`}\r\n          style={{ fontSize: '28px' }}\r\n        >\r\n          <div style={{ display: 'table-cell', verticalAlign: 'middle' }}>\r\n            <div>\r\n              <LoadingComponent />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <>\r\n          <div className={ChannelGroupStyles.formWrapper}>\r\n            <div className=\"d-flex position-relative\">\r\n              <p className={ChannelGroupStyles.headerText}>\r\n                Edit Channel Group\r\n              </p>\r\n            </div>\r\n            {formFields.map((field) => (\r\n              <div key={field.id}>\r\n                <div\r\n                  className={ChannelGroupStyles.formLabel}\r\n                  hidden={\r\n                    field.name === 'Organisation' &&\r\n                    AuthService.isOrganisationalAdmin()\r\n                  }\r\n                >\r\n                  {field.name}{' '}\r\n                  {field.isRequired ? (\r\n                    <span className={ChannelGroupStyles.required}>*</span>\r\n                  ) : (\r\n                    undefined\r\n                  )}\r\n                </div>\r\n\r\n                <div>\r\n                  {field.parameterName === 'name' && (\r\n                    <input\r\n                      className={ChannelGroupStyles.formInput}\r\n                      name={field.parameterName && field.parameterName}\r\n                      type={field.type}\r\n                      placeholder={field.placeHolder}\r\n                      onChange={onChangeParameters}\r\n                      maxLength={field.maxLength}\r\n                      onKeyDown={(evt) =>\r\n                        evt.target.maxLength <= evt.target.value.length &&\r\n                        evt.key !== 'Backspace' &&\r\n                        evt.preventDefault()\r\n                      }\r\n                      value={parameters.name}\r\n                    />\r\n                  )}\r\n\r\n                  {field.type === 'number' && (\r\n                    <input\r\n                      className={ChannelGroupStyles.formInput}\r\n                      name={field.parameterName && field.parameterName}\r\n                      type={field.type}\r\n                      placeholder={field.placeHolder}\r\n                      onChange={onChangeParameters}\r\n                      maxLength={field.maxLength}\r\n                      onKeyDown={(evt) =>\r\n                        (evt.key === 'e' ||\r\n                          evt.key === '+' ||\r\n                          evt.key === '-' ||\r\n                          evt.key === '.') &&\r\n                        evt.preventDefault()\r\n                      }\r\n                      value={inputFieldValue(field)}\r\n                    />\r\n                  )}\r\n                  {!AuthService.isOrganisationalAdmin() &&\r\n                    field.parameterName === 'organisationID' && (\r\n                      <SelectComponent\r\n                        label=\"\"\r\n                        text={selectedOrganisation}\r\n                        list={organisations}\r\n                        onSelect={selectOrganisation}\r\n                        width=\"100%\"\r\n                        disabled\r\n                        withSearch\r\n                      />\r\n                    )}\r\n\r\n                  {field.parameterName === 'status' && (\r\n                    <SelectComponent\r\n                      label=\"\"\r\n                      text={selectedStatus}\r\n                      list={statusList}\r\n                      onSelect={selectStatus}\r\n                      width=\"100%\"\r\n                      disabled={false}\r\n                    />\r\n                  )}\r\n\r\n                  {fieldHasError(field) && (\r\n                    <span className={ChannelGroupStyles.hasError}>\r\n                      {spanErrorText(field)}\r\n                    </span>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            ))}\r\n            <button\r\n              className={Styles.deleteButton}\r\n              style={{ marginTop: '15px', marginLeft: '0', width: '100%' }}\r\n              onClick={getChannels}\r\n              type=\"button\"\r\n            >\r\n              View Channels\r\n            </button>\r\n            <div className={`${Styles.userInfo} d-flex`}>\r\n              <div>\r\n                <p>\r\n                  Date Created <br />{' '}\r\n                  <span>{channelGroupInfo.dateCreated}</span>\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div\r\n            className=\"position-absolute start-0 bottom-0 text-center\"\r\n            style={{\r\n              width: '100%',\r\n              height: '45px',\r\n              marginBottom: '10px',\r\n            }}\r\n          >\r\n            <i\r\n              className={ChannelGroupStyles.saveIcon}\r\n              style={{ pointerEvent: isLoading && 'none' }}\r\n              data-toggle=\"tooltip\"\r\n              data-placement=\"top\"\r\n              title=\"Update channel group\"\r\n            >\r\n              <img\r\n                src={saveIcon}\r\n                alt=\"\"\r\n                onClick={handleEditSubmit}\r\n                onKeyDown={handleEditSubmit}\r\n                role=\"presentation\"\r\n              />\r\n            </i>\r\n            {/* <i\r\n              className={ChannelGroupStyles.trashcanIcon}\r\n              style={{ pointerEvent: isSubmitting && 'none' }}\r\n              data-toggle=\"tooltip\"\r\n              data-placement=\"top\"\r\n              title=\"Delete organisation\"\r\n            >\r\n              <img\r\n                src={trashcanIcon}\r\n                alt=\"\"\r\n                onClick={() => setModalShow(true)}\r\n              />\r\n            </i> */}\r\n            <i className={ChannelGroupStyles.closeCircleIcon}>\r\n              <img\r\n                src={closeCircleIcon}\r\n                alt=\"\"\r\n                onClick={() => callbackClosePanel()}\r\n                onKeyDown={() => callbackClosePanel()}\r\n                role=\"presentation\"\r\n                data-toggle=\"tooltip\"\r\n                data-placement=\"top\"\r\n                title=\"Cancel\"\r\n              />\r\n            </i>\r\n            {errorMessage !== '' && errorMessage}\r\n          </div>\r\n        </>\r\n      )}\r\n\r\n      <Modal\r\n        size=\"md\"\r\n        show={modalShow}\r\n        onHide={() => setModalShow(false)}\r\n        aria-labelledby=\"example-modal-sizes-title-lg\"\r\n      >\r\n        {/* <Modal.Header closeButton>\r\n          <Modal.Title id=\"example-modal-sizes-title-lg\">\r\n            Delete Organisation\r\n          </Modal.Title>\r\n        </Modal.Header> */}\r\n        <Modal.Body style={{ padding: '35px' }}>\r\n          <div style={{ textAlign: 'center' }}>\r\n            You are permanently deleting this channel group\r\n          </div>\r\n          <div style={{ textAlign: 'center', fontSize: '20px' }}>\r\n            Are you sure you want to proceed?\r\n          </div>\r\n\r\n          <div\r\n            style={{\r\n              textAlign: 'center',\r\n              paddingTop: '30px',\r\n            }}\r\n          >\r\n            <button\r\n              className={Styles.cancelButton}\r\n              onClick={() => setModalShow(false)}\r\n              type=\"button\"\r\n            >\r\n              Cancel\r\n            </button>\r\n            <button\r\n              className={Styles.deleteButton}\r\n              onClick={handleDeleteSubmit}\r\n              type=\"button\"\r\n            >\r\n              Proceed\r\n            </button>\r\n          </div>\r\n        </Modal.Body>\r\n      </Modal>\r\n\r\n      <Modal\r\n        size=\"md\"\r\n        show={modalChannelShow}\r\n        onHide={() => setModalChannelShow(false)}\r\n        aria-labelledby=\"example-modal-sizes-title-lg\"\r\n      >\r\n        <Modal.Body style={{ padding: '35px' }}>\r\n          <div style={{ textAlign: 'center' }}>\r\n            <h3 style={{ fontWeight: 'bolder' }}>Channels</h3>\r\n          </div>\r\n          <div\r\n            style={{\r\n              height: '500px',\r\n              overflow: 'auto',\r\n              textAlign: 'center',\r\n              marginTop: '15px',\r\n            }}\r\n          >\r\n            {channels.map((value) => (\r\n              <div key={value.id}>{value.channelName}</div>\r\n            ))}\r\n          </div>\r\n          <div\r\n            style={{\r\n              textAlign: 'center',\r\n              paddingTop: '30px',\r\n            }}\r\n          >\r\n            <button\r\n              className={Styles.cancelButton}\r\n              onClick={() => setModalChannelShow(false)}\r\n              style={{ marginLeft: '0' }}\r\n              type=\"button\"\r\n            >\r\n              Close\r\n            </button>\r\n          </div>\r\n        </Modal.Body>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\nEditDeleteChannelGroupComponent.propTypes = {\r\n  selectedChannelGroup: PropTypes.shape,\r\n  callbackClosePanel: PropTypes.func.isRequired,\r\n  callbackGetChannelGroups: PropTypes.func.isRequired,\r\n  channelGroups: PropTypes.arrayOf(PropTypes.shape),\r\n};\r\nEditDeleteChannelGroupComponent.defaultProps = {\r\n  selectedChannelGroup: null,\r\n  channelGroups: null,\r\n};\r\nexport default EditDeleteChannelGroupComponent;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { saveAs } from 'file-saver';\r\nimport Table from '../../shared/components/table/Table';\r\nimport ChannelGroupService from './ChannelGroupService';\r\nimport BannerComponent from '../_reusable/banner/BannerComponent';\r\nimport AuthService from '../../core/auth.service';\r\nimport ChannelGroupTestStorage from './ChannelGroupStorage';\r\nimport DateService from '../../core/date.service';\r\n\r\nimport AddChannelGroupComponent from './add-channelgroup/AddChannelGroupComponent';\r\nimport EditDeleteChannelGroupComponent from './edit-delete-channelgroup/EditDeleteChannelGroupComponent';\r\n\r\nfunction ChannelGroupComponent() {\r\n  const isOrganisationAdmin = AuthService.isOrganisationalAdmin();\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isExporting, setIsExporting] = useState(false);\r\n  const [selectedChannel, setSelectedChannel] = useState();\r\n  const [data, setData] = useState([]);\r\n  const [tableHeaders, setTableHeaders] = useState([]);\r\n  const [queryParameters, setQueryParameters] = useState({});\r\n  const [tableParameters, setTableParameters] = useState({});\r\n  const [sortParameters, setSortParameters] = useState({ order: 1, sort: 2 });\r\n  const [paginationParameters, setPaginationParameters] = useState({});\r\n  const [showAddPanel, setShowAddPanel] = useState(false);\r\n\r\n  const handleSetTableParameters = (parameters) => {\r\n    setTableParameters({\r\n      organisationFilter: parameters.organisationFilter,\r\n      organisationFilterValue: parameters.organisationFilterValue,\r\n      groupFilter: parameters.groupFilter,\r\n      groupFilterValue: parameters.groupFilterValue,\r\n      statusFilter: parameters.statusFilter,\r\n      runsFilter: parameters.runsFilter,\r\n      runsFilterValue: parameters.runsFilterValue,\r\n      topRatedFilter: parameters.topRatedFilter,\r\n      topRatedFilterValue: parameters.topRatedFilterValue,\r\n      channelFilter: parameters.channelFilter,\r\n      channelFilterValue: parameters.channelFilterValue,\r\n    });\r\n  };\r\n\r\n  const constructQueryParameters = (parameters) => {\r\n    const pagination = `?pageNumber=${\r\n      parameters.pageNumber ? parameters.pageNumber : 1\r\n    }\r\n    &pageSize=${parameters.pageSize ? parameters.pageSize : 50}`;\r\n\r\n    const sort = parameters.sortOrder && parameters.sortBy\r\n      ? `&sort=${parameters.sortBy ? parameters.sortBy : 1}\r\n        &sortBy=${parameters.sortOrder ? parameters.sortOrder : 1}`\r\n      : '';\r\n\r\n    const organisation = parameters.organisationFilter && parameters.organisationFilterValue\r\n      ? `&organisationFilter=${parameters.organisationFilter}&organisationFilterValue=${parameters.organisationFilterValue}`\r\n      : '';\r\n\r\n    const group = parameters.groupFilter && parameters.groupFilterValue\r\n      ? `&groupFilter=${parameters.groupFilter}&groupFilterValue=${parameters.groupFilterValue}`\r\n      : '';\r\n\r\n    const runs = parameters.runsFilter && parameters.runsFilterValue\r\n      ? `&runsFilter=${parameters.runsFilter}&runsFilterValue=${parameters.runsFilterValue}`\r\n      : '';\r\n\r\n    const topRated = parameters.topRatedFilter && parameters.topRatedFilterValue\r\n      ? `&topRatedFilter=${parameters.topRatedFilter}&topRatedFilterValue=${parameters.topRatedFilterValue}`\r\n      : '';\r\n\r\n    const channel = parameters.channelFilter && parameters.channelFilterValue\r\n      ? `&channelFilter=${parameters.channelFilter}&channelFilterValue=${parameters.channelFilterValue}`\r\n      : '';\r\n\r\n    const status = parameters.statusFilter\r\n      ? `&statusFilter=${parameters.statusFilter.map((s) => s.name).join('-')}`\r\n      : '';\r\n\r\n    const searchKey = parameters.searchKey\r\n      ? `&searchKey=${parameters.searchKey}`\r\n      : '';\r\n\r\n    let queryString = pagination\r\n      + sort\r\n      + organisation\r\n      + group\r\n      + runs\r\n      + topRated\r\n      + channel\r\n      + status\r\n      + searchKey;\r\n\r\n      if (queryString.includes('+')) {\r\n        queryString = queryString.replace('+', '%2B');\r\n      }\r\n      \r\n    return queryString;\r\n  };\r\n\r\n  const constructTableHeaders = () => {\r\n    let items = ChannelGroupTestStorage.tableHeaders;\r\n    if (isOrganisationAdmin) {\r\n      items = items.filter((item) => item.headerId !== 1);\r\n    }\r\n\r\n    setTableHeaders(items);\r\n  };\r\n\r\n  const constructData = (currentData) => {\r\n    let items = JSON.parse(JSON.stringify(currentData));\r\n    if (isOrganisationAdmin) {\r\n      items = items.map((item) => ({\r\n        channelGroupId: item.channelGroupId,\r\n        channelGroupName: item.channelGroupName,\r\n        status: item.status,\r\n        maxRuns: item.maxRuns,\r\n        topX: item.topX,\r\n        channels: item.channels,\r\n      }));\r\n    } else {\r\n      items = items.map((item) => ({\r\n        channelGroupId: item.channelGroupId,\r\n        organisationName: item.organisationName,\r\n        channelGroupName: item.channelGroupName,\r\n        status: item.status,\r\n        maxRuns: item.maxRuns,\r\n        topX: item.topX,\r\n        channels: item.channels,\r\n      }));\r\n    }\r\n\r\n    return items;\r\n  };\r\n\r\n  const handleGetChannelGroups = () => {\r\n    setIsLoading(true);\r\n\r\n    ChannelGroupService.getChannelGroups(\r\n      constructQueryParameters(queryParameters),\r\n    )\r\n      .then((response) => {\r\n        setData(constructData(response.data.channelGroups));\r\n\r\n        setPaginationParameters({\r\n          totalCount: response.data.totalCount,\r\n          pageSize: response.data.pageSize,\r\n          currentPage: response.data.currentPage,\r\n          totalPages: response.data.totalPages,\r\n        });\r\n      })\r\n      .finally(() => setIsLoading(false));\r\n  };\r\n\r\n  const handleOnFilter = (selectedData) => {\r\n    setQueryParameters({ ...queryParameters, ...selectedData, pageNumber: 1 });\r\n  };\r\n\r\n  const handleOnClearFilter = () => {\r\n    setQueryParameters({\r\n      pageNumber: 1,\r\n      pageSize: queryParameters.pageSize,\r\n      searchKey: queryParameters.searchKey,\r\n    });\r\n  };\r\n\r\n  const handleOnSearch = (searchKey) => {\r\n    setQueryParameters({ ...queryParameters, searchKey, pageNumber: 1});\r\n  };\r\n\r\n  const handleOnSort = ({ sortBy, sortOrder }) => {\r\n    setSortParameters({ order: sortOrder, sort: sortBy });\r\n    setQueryParameters({ ...queryParameters, sortBy, sortOrder });\r\n  };\r\n\r\n  const handleOnPaginate = (pageNumber, pageSize) => {\r\n    setQueryParameters({ ...queryParameters, pageNumber, pageSize });\r\n  };\r\n\r\n  const handleOnExport = () => {\r\n    if (!isExporting) {\r\n      const { organisationName } = AuthService.getUserIdentity();\r\n      setIsExporting(true);\r\n\r\n      ChannelGroupService.exportChannelGroups(\r\n        constructQueryParameters(queryParameters),\r\n      )\r\n        .then((response) => {\r\n          const blob = new Blob([response.data], {\r\n            type:\r\n              'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\r\n          });\r\n          saveAs(\r\n            blob,\r\n            `${\r\n              organisationName ? `${organisationName.toLowerCase()}_` : ''\r\n            }op2mise_channel_groups_data_export_${DateService.toExportFormat(\r\n              new Date(),\r\n            )}.xlsx`,\r\n          );\r\n        })\r\n        .finally(() => {\r\n          setIsExporting(false);\r\n        });\r\n    }\r\n  };\r\n\r\n  const handleSelectData = (selectedData) => {\r\n    setSelectedChannel(selectedData);\r\n    setShowAddPanel(false);\r\n  };\r\n\r\n  const handleUnselectData = () => {\r\n    setSelectedChannel();\r\n  };\r\n\r\n  const openAddPanel = () => {\r\n    setShowAddPanel(true);\r\n    setSelectedChannel();\r\n  };\r\n\r\n  const closeAddPanel = () => {\r\n    setShowAddPanel(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    constructTableHeaders();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    handleSetTableParameters(queryParameters);\r\n    handleGetChannelGroups();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [queryParameters]);\r\n\r\n  return (\r\n    <>\r\n      <BannerComponent\r\n        componentName=\"Channel Groups\"\r\n        addButtonText=\"New Channel Group\"\r\n        isAddButtonHidden={false}\r\n        handleSearch={handleOnSearch}\r\n        callbackAddButtonFunction={openAddPanel}\r\n      />\r\n\r\n      <hr style={{ borderTop: '1px  solid #b1b1b1', marginBottom: '8px' }} />\r\n\r\n      <div className=\"d-flex\">\r\n        <Table\r\n          noDataVerbiage=\"No channels found\"\r\n          list={data}\r\n          headers={tableHeaders}\r\n          queryParameters={tableParameters}\r\n          paginationParameters={paginationParameters}\r\n          sortParameters={sortParameters}\r\n          isFetchingData={isLoading}\r\n          isExporting={isExporting}\r\n          onFilter={handleOnFilter}\r\n          onClearFilters={handleOnClearFilter}\r\n          onSort={handleOnSort}\r\n          onPaginate={handleOnPaginate}\r\n          onExport={handleOnExport}\r\n          onDoubleClickSelectData={handleSelectData}\r\n        />\r\n\r\n        {showAddPanel && (\r\n          <AddChannelGroupComponent\r\n            callbackClosePanel={closeAddPanel}\r\n            callbackGetChannelGroups={handleGetChannelGroups}\r\n            channelGroups={data}\r\n          />\r\n        )}\r\n\r\n        {selectedChannel && (\r\n          <EditDeleteChannelGroupComponent\r\n            selectedChannelGroup={selectedChannel}\r\n            callbackClosePanel={handleUnselectData}\r\n            callbackGetChannelGroups={handleGetChannelGroups}\r\n            channelGroups={data}\r\n          />\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ChannelGroupComponent;\r\n"],"names":["addChannelGroup","json","url","process","axios","updateChannelGroup","ID","getChannelGroups","parameters","getChannelGroup","exportChannelGroups","responseType","getOrganisations","getChannels","getChannelsByGroup","tableHeaders","headerId","headerName","filter","type","queryNames","sortable","list","id","name","formFields","parameterName","placeHolder","isRequired","maxLength","editFormFields","statusList","checkString","text","undefined","maxRuns","AddChannelGroupComponent","callbackClosePanel","callbackGetChannelGroups","channelGroups","ChannelGroupStorage","useState","errorMessage","setErrorMessage","isSubmitting","setIsSubmitting","organisationID","topX","indicatorStatus","setParameters","selectedOrganisation","setSelectedOrganisation","selectedStatus","setSelectedStatus","organisations","setOrganisations","organisation","validation","setValidation","nameErrorText","setNameErrorText","organisationErrorText","setOrganisationErrorText","maxRunsErrorText","setMaxRunsErrorText","topXErrorText","setTopXErrorText","onChangeParameters","e","prevState","target","value","validateChannelGroup","valid","topx","some","channelGroup","channelGroupName","toLowerCase","trim","parseInt","handleSubmit","channelGroupParameters","channelGroupId","toString","ChannelGroupService","then","success","catch","error","responseMessage","response","data","message","danger","finally","selectOrganisation","selected","selectStatus","useEffect","organisationId","AuthService","isOrganisationalAdmin","organisationArray","responseOrganisations","organisationOptions","map","push","spanErrorText","field","fieldHasError","className","Styles","src","closeIcon","alt","onClick","onKeyDown","role","style","width","top","LoadingComponent","hidden","placeholder","onChange","evt","length","key","preventDefault","label","onSelect","disabled","withSearch","height","marginBottom","pointerEvent","title","saveIcon","closeCircleIcon","defaultProps","EditDeleteChannelGroupComponent","selectedChannelGroup","channelGroupInfo","setChannelGroupInfo","modalShow","setModalShow","isLoading","setIsLoading","modalChannelShow","setModalChannelShow","channels","setChannels","handleEditSubmit","organisationName","status","dateCreated","DateService","inputFieldValue","ChannelGroupStyles","minWidth","fontSize","display","verticalAlign","marginTop","marginLeft","Modal","size","show","onHide","padding","textAlign","paddingTop","fontWeight","overflow","channelName","isOrganisationAdmin","isExporting","setIsExporting","selectedChannel","setSelectedChannel","setData","setTableHeaders","queryParameters","setQueryParameters","tableParameters","setTableParameters","order","sort","sortParameters","setSortParameters","paginationParameters","setPaginationParameters","showAddPanel","setShowAddPanel","constructQueryParameters","queryString","pageNumber","pageSize","sortOrder","sortBy","organisationFilter","organisationFilterValue","groupFilter","groupFilterValue","runsFilter","runsFilterValue","topRatedFilter","topRatedFilterValue","channelFilter","channelFilterValue","statusFilter","s","join","searchKey","includes","replace","handleGetChannelGroups","currentData","items","JSON","parse","stringify","item","constructData","totalCount","currentPage","totalPages","ChannelGroupTestStorage","constructTableHeaders","BannerComponent","componentName","addButtonText","isAddButtonHidden","handleSearch","callbackAddButtonFunction","borderTop","Table","noDataVerbiage","headers","isFetchingData","onFilter","selectedData","onClearFilters","onSort","onPaginate","onExport","blob","Blob","saveAs","Date","onDoubleClickSelectData"],"sourceRoot":""}